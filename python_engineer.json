{
    "UCbXgNpp0jedKWcQiULLbDTA": {
        "channel_statistics": {
            "viewCount": "403299",
            "commentCount": "0",
            "subscriberCount": "9980",
            "hiddenSubscriberCount": false,
            "videoCount": "83"
        },
        "video_data": {
            "0_PgWWmauHk": {
                "publishedAt": "2020-09-03T15:00:01Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial - RNN & LSTM & GRU - Recurrent Neural Nets",
                "description": "Implement a Recurrent Neural Net (RNN) in PyTorch! Learn how we can use the nn.RNN module and work with an input sequence. I also show you how easily we can switch to a gated recurrent unit (GRU) or long short-term memory (LSTM) RNN.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode:\nhttps://github.com/python-engineer/pytorch-examples\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nBeginner Course Code:\nhttps://github.com/python-engineer/pytorchTutorial\n\nPyTorch Tutorial 13 - Feed-Forward Neural Network:\nhttps://youtu.be/oPhxf2fXHkQ\n\nRNN:\nhttps://pytorch.org/docs/stable/generated/torch.nn.RNN.html\n\nLSTM:\nhttps://pytorch.org/docs/stable/generated/torch.nn.LSTM.html\n\nGRU:\nhttps://pytorch.org/docs/stable/generated/torch.nn.GRU.html\n\nFurther Readings:\nhttps://karpathy.github.io/2015/05/21/rnn-effectiveness/\nhttps://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks#architecture\nhttps://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#PyTorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/0_PgWWmauHk/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/0_PgWWmauHk/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/0_PgWWmauHk/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/0_PgWWmauHk/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/0_PgWWmauHk/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "RNN",
                    "Recurrent Neural Net",
                    "LSTM",
                    "GRU"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial - RNN & LSTM & GRU - Recurrent Neural Nets",
                    "description": "Implement a Recurrent Neural Net (RNN) in PyTorch! Learn how we can use the nn.RNN module and work with an input sequence. I also show you how easily we can switch to a gated recurrent unit (GRU) or long short-term memory (LSTM) RNN.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode:\nhttps://github.com/python-engineer/pytorch-examples\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nBeginner Course Code:\nhttps://github.com/python-engineer/pytorchTutorial\n\nPyTorch Tutorial 13 - Feed-Forward Neural Network:\nhttps://youtu.be/oPhxf2fXHkQ\n\nRNN:\nhttps://pytorch.org/docs/stable/generated/torch.nn.RNN.html\n\nLSTM:\nhttps://pytorch.org/docs/stable/generated/torch.nn.LSTM.html\n\nGRU:\nhttps://pytorch.org/docs/stable/generated/torch.nn.GRU.html\n\nFurther Readings:\nhttps://karpathy.github.io/2015/05/21/rnn-effectiveness/\nhttps://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks#architecture\nhttps://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#PyTorch"
                },
                "defaultAudioLanguage": "en",
                "viewCount": "452",
                "likeCount": "36",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "29",
                "duration": "PT15M52S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "WEV61GmmPrk": {
                "publishedAt": "2020-08-31T17:37:24Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch RNN Tutorial - Name Classification Using A Recurrent Neural Net",
                "description": "Implement a Recurrent Neural Net (RNN) from scratch in PyTorch! I briefly explain the theory and different kinds of applications of RNNs. Then we implement a RNN to do name classification.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode and slides:\nhttps://github.com/python-engineer/pytorch-examples\n\nDownload the data:\nhttps://download.pytorch.org/tutorial/data.zip\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPyTorch Chatbot Tutorial:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrFW4AUgn-eY37qOAWQpJyg\n\nFurther Readings:\nhttps://karpathy.github.io/2015/05/21/rnn-effectiveness/\nhttps://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks#architecture\nhttps://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#PyTorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/WEV61GmmPrk/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/WEV61GmmPrk/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/WEV61GmmPrk/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/WEV61GmmPrk/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/WEV61GmmPrk/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "RNN",
                    "Recurrent Neural Net",
                    "NLP"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch RNN Tutorial - Name Classification Using A Recurrent Neural Net",
                    "description": "Implement a Recurrent Neural Net (RNN) from scratch in PyTorch! I briefly explain the theory and different kinds of applications of RNNs. Then we implement a RNN to do name classification.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode and slides:\nhttps://github.com/python-engineer/pytorch-examples\n\nDownload the data:\nhttps://download.pytorch.org/tutorial/data.zip\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPyTorch Chatbot Tutorial:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrFW4AUgn-eY37qOAWQpJyg\n\nFurther Readings:\nhttps://karpathy.github.io/2015/05/21/rnn-effectiveness/\nhttps://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks#architecture\nhttps://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#PyTorch"
                },
                "defaultAudioLanguage": "en",
                "viewCount": "763",
                "likeCount": "45",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "37",
                "duration": "PT38M57S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Hgg8Xy6IRig": {
                "publishedAt": "2020-08-15T16:30:01Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Lightning Tutorial - Lightweight PyTorch Wrapper For ML Researchers",
                "description": "PyTorch Lightning is a lightweight PyTorch wrapper that helps you scale your models and write less boilerplate code. In this Tutorial we learn about this framework and how we can convert our PyTorch code to a Lightning code.\n\nLightning is nothing more than organized PyTorch code, so once you\u2019ve organized it into a LightningModule, it automates most of the training for you.The beauty of Lightning is that it handles the details of when to validate, when to call .eval(), turning off gradients, detaching graphs, making sure you don\u2019t enable shuffle for val, etc\u2026\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode:\nhttps://github.com/python-engineer/pytorch-examples\n\nPyTorch Lightning:\nhttps://github.com/PyTorchLightning/pytorch-lightning\nhttps://pytorch-lightning.readthedocs.io/en/stable/\n\nMy PyTorch Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\nhttps://github.com/python-engineer/pytorchTutorial\n\nTensorboard Tutorial:\nhttps://www.youtube.com/watch?v=VJW9wU-1n18\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #PyTorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Hgg8Xy6IRig/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Hgg8Xy6IRig/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Hgg8Xy6IRig/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Hgg8Xy6IRig/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Hgg8Xy6IRig/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "Tensorboard",
                    "PyTorch Course",
                    "PyTorch Lightning"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Lightning Tutorial - Lightweight PyTorch Wrapper For ML Researchers",
                    "description": "PyTorch Lightning is a lightweight PyTorch wrapper that helps you scale your models and write less boilerplate code. In this Tutorial we learn about this framework and how we can convert our PyTorch code to a Lightning code.\n\nLightning is nothing more than organized PyTorch code, so once you\u2019ve organized it into a LightningModule, it automates most of the training for you.The beauty of Lightning is that it handles the details of when to validate, when to call .eval(), turning off gradients, detaching graphs, making sure you don\u2019t enable shuffle for val, etc\u2026\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode:\nhttps://github.com/python-engineer/pytorch-examples\n\nPyTorch Lightning:\nhttps://github.com/PyTorchLightning/pytorch-lightning\nhttps://pytorch-lightning.readthedocs.io/en/stable/\n\nMy PyTorch Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\nhttps://github.com/python-engineer/pytorchTutorial\n\nTensorboard Tutorial:\nhttps://www.youtube.com/watch?v=VJW9wU-1n18\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #PyTorch"
                },
                "defaultAudioLanguage": "en",
                "viewCount": "1620",
                "likeCount": "88",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "21",
                "duration": "PT28M2S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Z3i04RoI9Fk": {
                "publishedAt": "2020-08-12T10:00:06Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "My Minimal VS Code Setup for Python - 5 Visual Studio Code Extensions",
                "description": "I show you my minimal Visual Studio Code Setup for Python Programming. I use only 5 Extensions. It's simple but allows me to be really productive.\n\nVS Code is a free editor available for Mac, Windows, and Linux.\nDownload it here: https://code.visualstudio.com/\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Z3i04RoI9Fk/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Z3i04RoI9Fk/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Z3i04RoI9Fk/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Z3i04RoI9Fk/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Z3i04RoI9Fk/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "VS Code",
                    "Visual Studio Code",
                    "VS Code Extensions"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "My Minimal VS Code Setup for Python - 5 Visual Studio Code Extensions",
                    "description": "I show you my minimal Visual Studio Code Setup for Python Programming. I use only 5 Extensions. It's simple but allows me to be really productive.\n\nVS Code is a free editor available for Mac, Windows, and Linux.\nDownload it here: https://code.visualstudio.com/\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "defaultAudioLanguage": "en",
                "viewCount": "1899",
                "likeCount": "105",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "30",
                "duration": "PT6M23S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "9JUAPgtkKpI": {
                "publishedAt": "2020-08-09T10:00:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "NumPy Crash Course 2020 - Complete Tutorial",
                "description": "Learn NumPy in this complete 60 minutes Crash Course! I show you all the essential functions of NumPy, and some tricks and useful methods.  NumPy is the core library for scientific computing in Python. It is essential for any data science or machine learning algorithms.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nTimestamps:\n00:00 - Overview\n01:59 - NumPy Introduction\n03:30 - Installation and Basics\n08:00 - Array vs List\n12:06 - Dot Product\n15:52 - Speed Test array vs list\n17:54 - Multidimensional (nd) arrays\n22:09 - Indexing/Slicing/Boolean Indexing\n29:37 - Reshaping\n32:40 - Concatenation\n36:16 - Broadcasting\n38:26 - Functions and Axis\n41:50 - Datatypes\n44:03 - Copying\n45:15 - Generating arrays\n48:05 - Random numbers\n51:29 - Linear Algebra (Eigenvalues / Solving Linear Systems)\n01:00:04 - Loading CSV files\n\nYou can play around with the notebook here:\nhttps://github.com/python-engineer/python-engineer-notebooks\n\nData Loading with NumPy:\nhttps://youtu.be/eivDTOlA0TE\n\nMy Machine Learning Tutorials with NumPy:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2Upcrywf-u2etjdxxkL8nl7E\n\nNumPy Official site:\nhttps://numpy.org/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/9JUAPgtkKpI/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/9JUAPgtkKpI/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/9JUAPgtkKpI/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/9JUAPgtkKpI/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/9JUAPgtkKpI/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "numpy",
                    "tutorial",
                    "crash course",
                    "numpy tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "NumPy Crash Course 2020 - Complete Tutorial",
                    "description": "Learn NumPy in this complete 60 minutes Crash Course! I show you all the essential functions of NumPy, and some tricks and useful methods.  NumPy is the core library for scientific computing in Python. It is essential for any data science or machine learning algorithms.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nTimestamps:\n00:00 - Overview\n01:59 - NumPy Introduction\n03:30 - Installation and Basics\n08:00 - Array vs List\n12:06 - Dot Product\n15:52 - Speed Test array vs list\n17:54 - Multidimensional (nd) arrays\n22:09 - Indexing/Slicing/Boolean Indexing\n29:37 - Reshaping\n32:40 - Concatenation\n36:16 - Broadcasting\n38:26 - Functions and Axis\n41:50 - Datatypes\n44:03 - Copying\n45:15 - Generating arrays\n48:05 - Random numbers\n51:29 - Linear Algebra (Eigenvalues / Solving Linear Systems)\n01:00:04 - Loading CSV files\n\nYou can play around with the notebook here:\nhttps://github.com/python-engineer/python-engineer-notebooks\n\nData Loading with NumPy:\nhttps://youtu.be/eivDTOlA0TE\n\nMy Machine Learning Tutorials with NumPy:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2Upcrywf-u2etjdxxkL8nl7E\n\nNumPy Official site:\nhttps://numpy.org/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "defaultAudioLanguage": "en",
                "viewCount": "1394",
                "likeCount": "87",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "17",
                "duration": "PT1H2M44S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "bA7-DEtYCNM": {
                "publishedAt": "2020-08-05T10:00:10Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Create & Deploy A Deep Learning App - PyTorch Model Deployment With Flask & Heroku",
                "description": "Create and Deploy your first Deep Learning app! In this PyTorch tutorial we learn how to deploy our PyTorch model with Flask and Heroku.\nWe create a simple Flask app with a REST API that returns the result as json data, and then we deploy it to Heroku. As an example PytTorch app we do digit classification, and at the end I show you how I draw my own digits and then predict it with our live running app.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode:\nhttps://github.com/python-engineer/pytorch-examples\n\nLinks:\nFlask installation:\nhttps://flask.palletsprojects.com/en/1.1.x/installation/#installation\n\nPyTorch course & code:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\nhttps://github.com/python-engineer/pytorchTutorial\n\nPyTorch:\nhttps://pytorch.org/\n\nHeroku:\nhttps://www.heroku.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#PyTorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/bA7-DEtYCNM/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/bA7-DEtYCNM/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/bA7-DEtYCNM/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/bA7-DEtYCNM/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/bA7-DEtYCNM/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Flask",
                    "Heroku",
                    "Model deployment",
                    "PyTorch Deploy",
                    "Machine Learning",
                    "ML Web App"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Create & Deploy A Deep Learning App - PyTorch Model Deployment With Flask & Heroku",
                    "description": "Create and Deploy your first Deep Learning app! In this PyTorch tutorial we learn how to deploy our PyTorch model with Flask and Heroku.\nWe create a simple Flask app with a REST API that returns the result as json data, and then we deploy it to Heroku. As an example PytTorch app we do digit classification, and at the end I show you how I draw my own digits and then predict it with our live running app.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode:\nhttps://github.com/python-engineer/pytorch-examples\n\nLinks:\nFlask installation:\nhttps://flask.palletsprojects.com/en/1.1.x/installation/#installation\n\nPyTorch course & code:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\nhttps://github.com/python-engineer/pytorchTutorial\n\nPyTorch:\nhttps://pytorch.org/\n\nHeroku:\nhttps://www.heroku.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#PyTorch"
                },
                "defaultAudioLanguage": "en",
                "viewCount": "1667",
                "likeCount": "64",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "25",
                "duration": "PT41M52S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "VbCGxhGTjeE": {
                "publishedAt": "2020-07-26T10:00:08Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Coding Interview Question - Nth Fibonacci",
                "description": "In this tutorial we will be solving a popular coding interview question in Python:\nCalculate the Nth Fibonacci number.\nI show 3 possible solutions that let you shine during the coding interview and analyze the time and space complexity (big-O) of the algorithms.\n\n0, 1, 1, 2, 3, 5, 8, ___, ___, \n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/VbCGxhGTjeE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/VbCGxhGTjeE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/VbCGxhGTjeE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/VbCGxhGTjeE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/VbCGxhGTjeE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Interview question",
                    "coding interview",
                    "Python Tutorial",
                    "Fibonacci",
                    "Google interview",
                    "Facebook interview",
                    "coding interview question",
                    "Software developer interview"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Coding Interview Question - Nth Fibonacci",
                    "description": "In this tutorial we will be solving a popular coding interview question in Python:\nCalculate the Nth Fibonacci number.\nI show 3 possible solutions that let you shine during the coding interview and analyze the time and space complexity (big-O) of the algorithms.\n\n0, 1, 1, 2, 3, 5, 8, ___, ___, \n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "516",
                "likeCount": "39",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "20",
                "duration": "PT16M56S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "M_npdRYD4K0": {
                "publishedAt": "2020-07-16T16:33:56Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Snake Game In Python - Python Beginner Tutorial",
                "description": "Implement the famous Snake game in this beginner tutorial! Learn also how to use the curses module to build terminal applications. This tutorial is aimed at beginners. You will learn about different data structures (e.g. lists and tuples) and how to implement the game logic with different control flows (e.g. while loop / if-statements).\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find the code here:\nhttps://github.com/python-engineer/python-fun\n\nCurses doc:\nhttps://docs.python.org/3/howto/curses.html\n\nOriginal Code:\nhttps://gist.github.com/sanchitgangwar/2158089\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/M_npdRYD4K0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/M_npdRYD4K0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/M_npdRYD4K0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/M_npdRYD4K0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/M_npdRYD4K0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Snake Game",
                    "Python Game Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Snake Game In Python - Python Beginner Tutorial",
                    "description": "Implement the famous Snake game in this beginner tutorial! Learn also how to use the curses module to build terminal applications. This tutorial is aimed at beginners. You will learn about different data structures (e.g. lists and tuples) and how to implement the game logic with different control flows (e.g. while loop / if-statements).\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find the code here:\nhttps://github.com/python-engineer/python-fun\n\nCurses doc:\nhttps://docs.python.org/3/howto/curses.html\n\nOriginal Code:\nhttps://gist.github.com/sanchitgangwar/2158089\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2392",
                "likeCount": "64",
                "dislikeCount": "3",
                "favoriteCount": "0",
                "commentCount": "34",
                "duration": "PT23M25S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "8OKTAedgFYg": {
                "publishedAt": "2020-07-05T15:38:52Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "11 Tips And Tricks To Write Better Python Code",
                "description": "In this video, I show 11 Tips and Tricks to Write Better Python code! I show a lot of best practices that improve your code by making your code much cleaner and more Pythonic. \n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nAll Tips:\n1) Iterate with enumerate instead or range(len(x))\n2) Use list comprehension instead of raw for loops\n3) Sort complex iterables with sorted()\n4) Store unique values with Sets\n5) Save memory with Generators\n6) Define default values in Dictionaries with .get() and .setdefault()\n7) Count hashable objects with collections.Counter\n8) Format strings with f-Strings (Python 3.6+)\n9) Concatenate strings with .join()\n10) Merge dictionaries with {**d1, **d2} (Python 3.5+)\n11) Simplify if-statements with if x in list\n\nList comprehension Tutorial: https://youtu.be/RaIu2-NM0t0\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nBackground Music: https://www.bensound.com/\n\n#Python #Tips",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/8OKTAedgFYg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/8OKTAedgFYg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/8OKTAedgFYg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/8OKTAedgFYg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/8OKTAedgFYg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python Tips"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "11 Tips And Tricks To Write Better Python Code",
                    "description": "In this video, I show 11 Tips and Tricks to Write Better Python code! I show a lot of best practices that improve your code by making your code much cleaner and more Pythonic. \n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nAll Tips:\n1) Iterate with enumerate instead or range(len(x))\n2) Use list comprehension instead of raw for loops\n3) Sort complex iterables with sorted()\n4) Store unique values with Sets\n5) Save memory with Generators\n6) Define default values in Dictionaries with .get() and .setdefault()\n7) Count hashable objects with collections.Counter\n8) Format strings with f-Strings (Python 3.6+)\n9) Concatenate strings with .join()\n10) Merge dictionaries with {**d1, **d2} (Python 3.5+)\n11) Simplify if-statements with if x in list\n\nList comprehension Tutorial: https://youtu.be/RaIu2-NM0t0\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nBackground Music: https://www.bensound.com/\n\n#Python #Tips"
                },
                "viewCount": "2965",
                "likeCount": "230",
                "dislikeCount": "6",
                "favoriteCount": "0",
                "commentCount": "32",
                "duration": "PT11M",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "yKHJsLUENl0": {
                "publishedAt": "2020-06-28T10:00:14Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Python Flask Beginner Tutorial - Todo App - Crash Course",
                "description": "Learn how to write your first TODO App with Flask in this Crash Course. Flask is one of the most popular web frameworks written in Python. Flask is a lightweight framework that is perfect for beginners. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. Learn how to:\n\n- Install and Setup Flask\n- Define routes\n- Use templates\n- Use a Database (we use SQLAlchemy and SQLite Database)\n- Build TODO App functionality\n- Add styling with Semantic UI\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find the code here:\nhttps://github.com/python-engineer/flask-todo\n\nFlask: https://flask.palletsprojects.com/en/1.1.x/\nSemantic UI: https://semantic-ui.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/check\nhttps://fontawesome.com/icons/bars\n\n#Python #Flask",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/yKHJsLUENl0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/yKHJsLUENl0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/yKHJsLUENl0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/yKHJsLUENl0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/yKHJsLUENl0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Flask",
                    "Flask Crash Course",
                    "Flask Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Python Flask Beginner Tutorial - Todo App - Crash Course",
                    "description": "Learn how to write your first TODO App with Flask in this Crash Course. Flask is one of the most popular web frameworks written in Python. Flask is a lightweight framework that is perfect for beginners. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. Learn how to:\n\n- Install and Setup Flask\n- Define routes\n- Use templates\n- Use a Database (we use SQLAlchemy and SQLite Database)\n- Build TODO App functionality\n- Add styling with Semantic UI\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find the code here:\nhttps://github.com/python-engineer/flask-todo\n\nFlask: https://flask.palletsprojects.com/en/1.1.x/\nSemantic UI: https://semantic-ui.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/check\nhttps://fontawesome.com/icons/bars\n\n#Python #Flask"
                },
                "viewCount": "2531",
                "likeCount": "93",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "16",
                "duration": "PT42M57S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "k1SzvvFtl4w": {
                "publishedAt": "2020-06-11T10:00:14Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 4)",
                "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/k1SzvvFtl4w/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/k1SzvvFtl4w/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/k1SzvvFtl4w/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/k1SzvvFtl4w/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/k1SzvvFtl4w/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "PyTorch",
                    "Chat bot",
                    "Python chat bot",
                    "NLP"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 4)",
                    "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning"
                },
                "viewCount": "2689",
                "likeCount": "80",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "69",
                "duration": "PT16M24S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Da-iHgrmHYg": {
                "publishedAt": "2020-06-10T10:00:07Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 3)",
                "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Da-iHgrmHYg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Da-iHgrmHYg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Da-iHgrmHYg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Da-iHgrmHYg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Da-iHgrmHYg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "PyTorch",
                    "Chat bot",
                    "Python chat bot",
                    "NLP"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 3)",
                    "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning"
                },
                "viewCount": "2371",
                "likeCount": "44",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "70",
                "duration": "PT14M33S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "8qwowmiXANQ": {
                "publishedAt": "2020-06-09T10:00:03Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 2)",
                "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/8qwowmiXANQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/8qwowmiXANQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/8qwowmiXANQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/8qwowmiXANQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/8qwowmiXANQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "PyTorch",
                    "Chat bot",
                    "Python chat bot",
                    "NLP"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 2)",
                    "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning"
                },
                "viewCount": "3373",
                "likeCount": "64",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "35",
                "duration": "PT23M58S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "RpWeNzfSUHw": {
                "publishedAt": "2020-06-08T17:56:35Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 1)",
                "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/RpWeNzfSUHw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/RpWeNzfSUHw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/RpWeNzfSUHw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/RpWeNzfSUHw/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/RpWeNzfSUHw/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "PyTorch",
                    "Chat bot",
                    "Python chat bot",
                    "NLP"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Chat Bot With PyTorch - NLP And Deep Learning - Python Tutorial (Part 1)",
                    "description": "In this Python Tutorial we build a simple chatbot using PyTorch and Deep Learning. I will also provide an introduction to some basic Natural Language Processing (NLP) techniques.\n\n1) Theory + NLP concepts (Stemming, Tokenization, bag of words)\n2) Create training data\n3) PyTorch model and training\n4) Save/load model and implement the chat\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nArticle \"Contextual Chatbots with Tensorflow\":\nhttps://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077\n\nNLTK:\nhttps://www.nltk.org\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/pytorch-chatbot\n\nPyTorch Beginner Course:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcons:\nhttps://fontawesome.com/icons/comments\nhttps://fontawesome.com/icons/robot\n\n#PyTorch #NLP #DeepLearning"
                },
                "viewCount": "10239",
                "likeCount": "248",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "58",
                "duration": "PT20M42S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Klqn--Mu2pE": {
                "publishedAt": "2020-06-03T10:30:40Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Build A Beautiful Machine Learning Web App With Streamlit And Scikit-learn | Python Tutorial",
                "description": "In this tutorial we build an interactive machine learning app with Streamlit and Scikit-learn to explore different datasets and classifier. This tutorial should demonstrate how easy interactive web applications can be build with Streamlit. Streamlit lets you create beautiful apps for your machine learning projects with simple Python scripts. As a bonus, you will also learn how we can implement Machine Learning classification pipelines using Scikit-learn.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nStreamlit website: https://www.streamlit.io/\nScikit-learn website: https://scikit-learn.org/\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/streamlit-demo\n\nML From Scratch Playlist:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2Upcrywf-u2etjdxxkL8nl7E\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning #sklearn",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Klqn--Mu2pE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Klqn--Mu2pE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Klqn--Mu2pE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Klqn--Mu2pE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Klqn--Mu2pE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python Tutorial",
                    "Streamlit",
                    "Machine Learning",
                    "ML",
                    "ML Web App",
                    "scikit-learn"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Build A Beautiful Machine Learning Web App With Streamlit And Scikit-learn | Python Tutorial",
                    "description": "In this tutorial we build an interactive machine learning app with Streamlit and Scikit-learn to explore different datasets and classifier. This tutorial should demonstrate how easy interactive web applications can be build with Streamlit. Streamlit lets you create beautiful apps for your machine learning projects with simple Python scripts. As a bonus, you will also learn how we can implement Machine Learning classification pipelines using Scikit-learn.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nStreamlit website: https://www.streamlit.io/\nScikit-learn website: https://scikit-learn.org/\n\nYou can find the code on GitHub:\nhttps://github.com/python-engineer/streamlit-demo\n\nML From Scratch Playlist:\nhttps://www.youtube.com/playlist?list=PLqnslRFeH2Upcrywf-u2etjdxxkL8nl7E\n\nPlease checkout my website to see all tutorials:\nhttps://www.python-engineer.com\n\nYou can find me here:\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning #sklearn"
                },
                "viewCount": "9288",
                "likeCount": "345",
                "dislikeCount": "3",
                "favoriteCount": "0",
                "commentCount": "75",
                "duration": "PT38M45S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "yCYPzoG25ak": {
                "publishedAt": "2020-05-17T11:30:08Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Build & Deploy A Python Web App To Automate Twitter | Flask, Heroku, Twitter API & Google Sheets API",
                "description": "Build & Deploy a Python web app to schedule Tweets. I'm using Flask, Heroku, the Twitter API, and Google Sheets API for this. You can watch how I build this app step by step from zero to deployment! The app can be hosted for free then.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find the starting point and important commands here:\nhttps://github.com/python-engineer/tweet-scheduler\n\nFlask: https://flask.palletsprojects.com/en/1.1.x/\nHeroku: https://www.heroku.com/\nTweepy: https://www.tweepy.org/\ngspread: https://gspread.readthedocs.io/en/latest/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Flask",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/yCYPzoG25ak/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/yCYPzoG25ak/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/yCYPzoG25ak/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/yCYPzoG25ak/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/yCYPzoG25ak/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Flask",
                    "Heroku",
                    "Web App",
                    "Tutorial",
                    "Flask deploy"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Build & Deploy A Python Web App To Automate Twitter | Flask, Heroku, Twitter API & Google Sheets API",
                    "description": "Build & Deploy a Python web app to schedule Tweets. I'm using Flask, Heroku, the Twitter API, and Google Sheets API for this. You can watch how I build this app step by step from zero to deployment! The app can be hosted for free then.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find the starting point and important commands here:\nhttps://github.com/python-engineer/tweet-scheduler\n\nFlask: https://flask.palletsprojects.com/en/1.1.x/\nHeroku: https://www.heroku.com/\nTweepy: https://www.tweepy.org/\ngspread: https://gspread.readthedocs.io/en/latest/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Flask"
                },
                "viewCount": "2411",
                "likeCount": "105",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "30",
                "duration": "PT1H42M33S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "T1vqS1NL89E": {
                "publishedAt": "2020-05-16T13:05:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Google Sheets and Python - Tutorial 2020",
                "description": "Learn how to use Google Sheets API in Python. We are using the gspread module for this. It's super simple to setup a project, and then access and modify our spreadsheet with a Python script. Google Sheets can be pretty powerful and used as a backend to store some data for your web applications.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nCheck out gspread documentation here: https://gspread.readthedocs.io/en/latest/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/T1vqS1NL89E/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/T1vqS1NL89E/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/T1vqS1NL89E/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/T1vqS1NL89E/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/T1vqS1NL89E/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Google Sheets Python"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Google Sheets and Python - Tutorial 2020",
                    "description": "Learn how to use Google Sheets API in Python. We are using the gspread module for this. It's super simple to setup a project, and then access and modify our spreadsheet with a Python script. Google Sheets can be pretty powerful and used as a backend to store some data for your web applications.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nCheck out gspread documentation here: https://gspread.readthedocs.io/en/latest/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "4188",
                "likeCount": "154",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "36",
                "duration": "PT9M56S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "9IDXYHhAfGA": {
                "publishedAt": "2020-05-08T13:00:04Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "LDA (Linear Discriminant Analysis) In Python - ML From Scratch 14 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the LDA algorithm using only built-in Python modules and numpy. LDA (Linear Discriminant Analysis) is a feature reduction technique and a common preprocessing step in machine learning pipelines. We will learn about the concept and the math behind this popular ML algorithm, and how to implement it in Python.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://sebastianraschka.com/Articles/2014_python_lda.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/9IDXYHhAfGA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/9IDXYHhAfGA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/9IDXYHhAfGA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/9IDXYHhAfGA/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/9IDXYHhAfGA/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "LDA",
                    "Linear Discriminant Analysis",
                    "ML From Scratch",
                    "ML",
                    "Python ML Tutorial",
                    "numpy"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "LDA (Linear Discriminant Analysis) In Python - ML From Scratch 14 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the LDA algorithm using only built-in Python modules and numpy. LDA (Linear Discriminant Analysis) is a feature reduction technique and a common preprocessing step in machine learning pipelines. We will learn about the concept and the math behind this popular ML algorithm, and how to implement it in Python.\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://sebastianraschka.com/Articles/2014_python_lda.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "1842",
                "likeCount": "41",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "25",
                "duration": "PT22M13S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "aP2KJoTITO0": {
                "publishedAt": "2020-04-30T12:39:24Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "TinyDB in Python - Simple Database For Personal Projects",
                "description": "In this Python Tutorial, I want to show you how to work with TinyDB. TinyDB is a tiny, document oriented database which is perfect for small personal projects. The API is super simple and fun to use. I show you basic functionalities like adding, deleting, updating, and searching. TinyDB is open sourced an can be found on GitHub:\nhttps://github.com/msiemens/tinydb\n\nUpdate 07/2020:\nUnfortunately some of the used methods have been removed in the newest 4.0 version:\nhttps://tinydb.readthedocs.io/en/stable/upgrade.html#upgrade-v4-0\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you like this Tutorial, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nFurther readings:\nhttps://tinydb.readthedocs.io/en/latest/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcon: https://fontawesome.com/icons/database\n\n#Python #database",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/aP2KJoTITO0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/aP2KJoTITO0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/aP2KJoTITO0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/aP2KJoTITO0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/aP2KJoTITO0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "TinyDB",
                    "Python Database Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "TinyDB in Python - Simple Database For Personal Projects",
                    "description": "In this Python Tutorial, I want to show you how to work with TinyDB. TinyDB is a tiny, document oriented database which is perfect for small personal projects. The API is super simple and fun to use. I show you basic functionalities like adding, deleting, updating, and searching. TinyDB is open sourced an can be found on GitHub:\nhttps://github.com/msiemens/tinydb\n\nUpdate 07/2020:\nUnfortunately some of the used methods have been removed in the newest 4.0 version:\nhttps://tinydb.readthedocs.io/en/stable/upgrade.html#upgrade-v4-0\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you like this Tutorial, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nFurther readings:\nhttps://tinydb.readthedocs.io/en/latest/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcon: https://fontawesome.com/icons/database\n\n#Python #database"
                },
                "viewCount": "1472",
                "likeCount": "51",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "15",
                "duration": "PT15M44S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "eivDTOlA0TE": {
                "publishedAt": "2020-04-28T14:10:41Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "How To Load Machine Learning Data From Files In Python",
                "description": "The common data format in Machine Learning is a CSV file (comma separated values). In this Tutorial I show 4 different ways how you can load the data from such files and then prepare the data. I also show you some best practices on how to deal with the correct data type, missing values, and an optional header. The 4 approaches are:\n\n- with the csv module\n- with numpy: np.loadtxt() and numpy.genfromtxt()\n- with pandas: pd.read_csv()\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code and all Machine Learning tutorials can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/eivDTOlA0TE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/eivDTOlA0TE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/eivDTOlA0TE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/eivDTOlA0TE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/eivDTOlA0TE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML From Scratch",
                    "ML",
                    "Python ML Tutorial",
                    "numpy"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "How To Load Machine Learning Data From Files In Python",
                    "description": "The common data format in Machine Learning is a CSV file (comma separated values). In this Tutorial I show 4 different ways how you can load the data from such files and then prepare the data. I also show you some best practices on how to deal with the correct data type, missing values, and an optional header. The 4 approaches are:\n\n- with the csv module\n- with numpy: np.loadtxt() and numpy.genfromtxt()\n- with pandas: pd.read_csv()\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code and all Machine Learning tutorials can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "939",
                "likeCount": "35",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "0",
                "duration": "PT17M10S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "AEE9ecgLgdQ": {
                "publishedAt": "2020-04-19T13:50:49Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Regular Expressions in Python - ALL You Need To Know - Programming Tutorial",
                "description": "In this Python Tutorial, we will be learning about Regular Expressions (or RE, regex) in Python. Regular expressions are a powerful language for matching text patterns. Possible pattern examples for searches are e-mail addresses or domain names. This video covers all you need to know to understand any regex expression! I go over all important concepts and mix examples in between.\n\nHere is an overview what I am showing you, if you want to skip to a specific part:\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you like this Tutorial, please subscribe to the channel!\n\n0) re Module 00:00\n1) Methods to search for matches 06:38\n2) Methods on a match object 09:55\n3) Meta Characters 12:25\n4) Special Sequences 16:15\n5) Sets 21:14\n6) Quantifier 25:30\n7) Conditions 35:45\n8) Grouping 40:00\n9) Modification 48:07\n10) Compilation Flags 1:01:48\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/videos/regular-expressions/\n\nFurther readings:\nhttps://docs.python.org/3/howto/regex.html\nhttps://docs.python.org/3/library/re.html\nhttps://developers.google.com/edu/python/regular-expressions\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #regex",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/AEE9ecgLgdQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/AEE9ecgLgdQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/AEE9ecgLgdQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/AEE9ecgLgdQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/AEE9ecgLgdQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Regex",
                    "Regular Expressions",
                    "Python Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Regular Expressions in Python - ALL You Need To Know - Programming Tutorial",
                    "description": "In this Python Tutorial, we will be learning about Regular Expressions (or RE, regex) in Python. Regular expressions are a powerful language for matching text patterns. Possible pattern examples for searches are e-mail addresses or domain names. This video covers all you need to know to understand any regex expression! I go over all important concepts and mix examples in between.\n\nHere is an overview what I am showing you, if you want to skip to a specific part:\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you like this Tutorial, please subscribe to the channel!\n\n0) re Module 00:00\n1) Methods to search for matches 06:38\n2) Methods on a match object 09:55\n3) Meta Characters 12:25\n4) Special Sequences 16:15\n5) Sets 21:14\n6) Quantifier 25:30\n7) Conditions 35:45\n8) Grouping 40:00\n9) Modification 48:07\n10) Compilation Flags 1:01:48\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/videos/regular-expressions/\n\nFurther readings:\nhttps://docs.python.org/3/howto/regex.html\nhttps://docs.python.org/3/library/re.html\nhttps://developers.google.com/edu/python/regular-expressions\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #regex"
                },
                "viewCount": "833",
                "likeCount": "46",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "8",
                "duration": "PT1H4M48S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "9L9jEOwRrCg": {
                "publishedAt": "2020-04-13T18:03:59Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 17 - Saving and Loading Models",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn how to save and load our model. I will show you the different functions you have to remember, and the different ways of saving our model. I also show you what you must consider when using a GPU.\n\nFunctions you must know:\n- torch.save()\n- torch.load()\n- torch.nn.Module().load_state_dict()\n\nPart 17: Saving and Loading Models\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nFurther Readings:\nhttps://pytorch.org/tutorials/beginner/saving_loading_models.html\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/9L9jEOwRrCg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/9L9jEOwRrCg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/9L9jEOwRrCg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/9L9jEOwRrCg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/9L9jEOwRrCg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 17 - Saving and Loading Models",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn how to save and load our model. I will show you the different functions you have to remember, and the different ways of saving our model. I also show you what you must consider when using a GPU.\n\nFunctions you must know:\n- torch.save()\n- torch.load()\n- torch.nn.Module().load_state_dict()\n\nPart 17: Saving and Loading Models\n\n\ud83d\ude80\ud83d\ude80 JOIN MY NEWSLETTER \ud83d\ude80\ud83d\ude80\nhttps://www.python-engineer.com/newsletter/\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nFurther Readings:\nhttps://pytorch.org/tutorials/beginner/saving_loading_models.html\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "4044",
                "likeCount": "107",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "19",
                "duration": "PT18M24S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "VJW9wU-1n18": {
                "publishedAt": "2020-03-30T15:59:25Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 16 - How To Use The TensorBoard",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn about the TensorBoard and how we can use it to visualize and analyze our models. TensorBoard is a visualization toolkit that provides the visualization and tooling needed for machine learning experimentation:\n\nWe will learn:\n- How to install and use the TensorBoard in Pytorch\n- How to add images\n- How to add a model graph\n- How to visualize loss and accuracy during training\n- How to plot precision-recall curves\n\nPart 16: How To Use The TensorBoard\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nFurther Readings:\nhttps://www.tensorflow.org/tensorboard\nhttps://pytorch.org/docs/stable/tensorboard.html\nhttps://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-classification-in-python/\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/VJW9wU-1n18/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/VJW9wU-1n18/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/VJW9wU-1n18/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/VJW9wU-1n18/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/VJW9wU-1n18/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "Tensorboard",
                    "PyTorch Course"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 16 - How To Use The TensorBoard",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn about the TensorBoard and how we can use it to visualize and analyze our models. TensorBoard is a visualization toolkit that provides the visualization and tooling needed for machine learning experimentation:\n\nWe will learn:\n- How to install and use the TensorBoard in Pytorch\n- How to add images\n- How to add a model graph\n- How to visualize loss and accuracy during training\n- How to plot precision-recall curves\n\nPart 16: How To Use The TensorBoard\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nFurther Readings:\nhttps://www.tensorflow.org/tensorboard\nhttps://pytorch.org/docs/stable/tensorboard.html\nhttps://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-classification-in-python/\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "5537",
                "likeCount": "110",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "24",
                "duration": "PT25M41S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "dYvt3vSJaQA": {
                "publishedAt": "2020-03-23T14:32:45Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Complete FREE Study Guide for Machine Learning and Deep Learning",
                "description": "A complete study plan to become a Machine Learning Engineer with links to all FREE resources. If you finish the list you will be equipped with enough theoretical and practical experience to get started in the industry! I tried to limit the resources to a minimum, but some courses are extensive.\n\nFind the Complete List here:\nhttps://github.com/python-engineer/ml-study-plan\n\nI divided the plan into these categories:\n0. Prerequisites\n1. Machine Learning\n2. Deep Learning\n3. Own Projects and Kaggle Competitions\n4. Interview Preparation\n5. Next Level Pro Tips\n\nThis plan is not sponsored by anyone on the list! \n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcon made by Eucalyp from www.flaticon.com\n\n#MachineLearning #DeepLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/dYvt3vSJaQA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/dYvt3vSJaQA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/dYvt3vSJaQA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/dYvt3vSJaQA/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/dYvt3vSJaQA/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "Python ML Tutorial",
                    "numpy",
                    "Study Guide",
                    "Study Plan",
                    "Machine Learning Engineer",
                    "ML Roadmap"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Complete FREE Study Guide for Machine Learning and Deep Learning",
                    "description": "A complete study plan to become a Machine Learning Engineer with links to all FREE resources. If you finish the list you will be equipped with enough theoretical and practical experience to get started in the industry! I tried to limit the resources to a minimum, but some courses are extensive.\n\nFind the Complete List here:\nhttps://github.com/python-engineer/ml-study-plan\n\nI divided the plan into these categories:\n0. Prerequisites\n1. Machine Learning\n2. Deep Learning\n3. Own Projects and Kaggle Competitions\n4. Interview Preparation\n5. Next Level Pro Tips\n\nThis plan is not sponsored by anyone on the list! \n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\nIcon made by Eucalyp from www.flaticon.com\n\n#MachineLearning #DeepLearning"
                },
                "viewCount": "1369",
                "likeCount": "85",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "11",
                "duration": "PT12M21S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "wF5t4Mmv5us": {
                "publishedAt": "2020-03-16T20:04:26Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "AdaBoost in Python - Machine Learning From Scratch 13 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the AdaBoost algorithm using only built-in Python modules and numpy. AdaBoost is an ensemble technique that attempts to create a strong classifier from a number of weak classifiers. We will first learn about the concept and the math behind this popular ML algorithm, and then we jump to the code.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://towardsdatascience.com/understanding-adaboost-2f94f22d5bfe\nhttps://machinelearningmastery.com/boosting-and-adaboost-for-machine-learning/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/wF5t4Mmv5us/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/wF5t4Mmv5us/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/wF5t4Mmv5us/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/wF5t4Mmv5us/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/wF5t4Mmv5us/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML From Scratch",
                    "ML",
                    "Python ML Tutorial",
                    "numpy",
                    "AdaBoost"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "AdaBoost in Python - Machine Learning From Scratch 13 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the AdaBoost algorithm using only built-in Python modules and numpy. AdaBoost is an ensemble technique that attempts to create a strong classifier from a number of weak classifiers. We will first learn about the concept and the math behind this popular ML algorithm, and then we jump to the code.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://towardsdatascience.com/understanding-adaboost-2f94f22d5bfe\nhttps://machinelearningmastery.com/boosting-and-adaboost-for-machine-learning/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "2719",
                "likeCount": "53",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "25",
                "duration": "PT27M35S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "XqYpE6jqdww": {
                "publishedAt": "2020-03-09T16:54:04Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "YouTube Data API Tutorial with Python - Analyze the Data - Part 4",
                "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics\n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/XqYpE6jqdww/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/XqYpE6jqdww/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/XqYpE6jqdww/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/XqYpE6jqdww/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/XqYpE6jqdww/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "YouTube API",
                    "YouTube Data API",
                    "jupyter",
                    "jupyter notebook",
                    "Python Tutorial",
                    "Data Science"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "YouTube Data API Tutorial with Python - Analyze the Data - Part 4",
                    "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics\n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial"
                },
                "viewCount": "672",
                "likeCount": "24",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "21",
                "duration": "PT22M11S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "itiRd7iZ2_M": {
                "publishedAt": "2020-03-08T13:00:14Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "YouTube Data API Tutorial with Python - Get Video Statistics - Part 3",
                "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics\n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/itiRd7iZ2_M/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/itiRd7iZ2_M/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/itiRd7iZ2_M/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/itiRd7iZ2_M/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/itiRd7iZ2_M/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "YouTube API",
                    "YouTube Data API",
                    "jupyter",
                    "jupyter notebook",
                    "Python Tutorial",
                    "Data Science"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "YouTube Data API Tutorial with Python - Get Video Statistics - Part 3",
                    "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics\n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial"
                },
                "viewCount": "932",
                "likeCount": "22",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "9",
                "duration": "PT17M18S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "4FwXqOT4-FM": {
                "publishedAt": "2020-03-07T13:27:31Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "YouTube Data API Tutorial with Python - Find Channel Videos - Part 2",
                "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics \n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/4FwXqOT4-FM/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/4FwXqOT4-FM/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/4FwXqOT4-FM/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/4FwXqOT4-FM/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/4FwXqOT4-FM/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "YouTube API",
                    "YouTube Data API",
                    "jupyter",
                    "jupyter notebook",
                    "Python Tutorial",
                    "Data Science"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "YouTube Data API Tutorial with Python - Find Channel Videos - Part 2",
                    "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics \n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial"
                },
                "viewCount": "1298",
                "likeCount": "30",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "10",
                "duration": "PT24M15S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "5qtC-tsQ-wE": {
                "publishedAt": "2020-02-23T11:59:11Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "YouTube Data API Tutorial with Python - Analyze Channel Statistics - Part 1",
                "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics\n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/5qtC-tsQ-wE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/5qtC-tsQ-wE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/5qtC-tsQ-wE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/5qtC-tsQ-wE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/5qtC-tsQ-wE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "YouTube API",
                    "YouTube Data API",
                    "jupyter",
                    "jupyter notebook",
                    "Python Tutorial",
                    "Data Science"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "YouTube Data API Tutorial with Python - Analyze Channel Statistics - Part 1",
                    "description": "In this Python Tutorial we will be learning how to work with the YouTube Data API and analyze channel statistics. This is going to be a 4 part series:\n\n- Part 1: Setup your app and get API Key, and extract basic channel statistics\n- Part 2: Get a list of all the videos of a channel\n- Part 3: Get in depth statistics for each video\n- Part 4: Analyze the data in a jupyter notebook\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/youtube-analyzer\n\nMore:\n- Official guides and docs: https://developers.google.com/youtube/v3\n- Register app: https://console.developers.google.com/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial"
                },
                "viewCount": "4125",
                "likeCount": "102",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "29",
                "duration": "PT20M42S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "K0lWSB2QoIQ": {
                "publishedAt": "2020-02-12T17:57:47Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 15 - Transfer Learning",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn about transfer learning and how this can be implemented in PyTorch.\n\nWe will learn:\n- What is Transfer Learning\n- Use the pretrained ResNet-18 model\n- Apply transfer learning to classify ants and bees\n- Exchange the last fully connected layer\n- Try 2 methods: Finetune the whole network or train only the last layer\n- Evaluate the results\n\nPart 15: Transfer Learning\n\nYou can download the dataset here:\nhttps://download.pytorch.org/tutorial/hymenoptera_data.zip\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nMore about Transfer Learning:\nhttps://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/K0lWSB2QoIQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/K0lWSB2QoIQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/K0lWSB2QoIQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/K0lWSB2QoIQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/K0lWSB2QoIQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "Transfer Learning",
                    "PyTorch Course"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 15 - Transfer Learning",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn about transfer learning and how this can be implemented in PyTorch.\n\nWe will learn:\n- What is Transfer Learning\n- Use the pretrained ResNet-18 model\n- Apply transfer learning to classify ants and bees\n- Exchange the last fully connected layer\n- Try 2 methods: Finetune the whole network or train only the last layer\n- Evaluate the results\n\nPart 15: Transfer Learning\n\nYou can download the dataset here:\nhttps://download.pytorch.org/tutorial/hymenoptera_data.zip\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nMore about Transfer Learning:\nhttps://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "5745",
                "likeCount": "129",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "42",
                "duration": "PT14M55S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Q8oRicpUeuw": {
                "publishedAt": "2020-02-09T16:07:56Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "The Walrus Operator - New in Python 3.8 - Python Tutorial",
                "description": "In this Python Tutorial I show you the new assignment expression also known as the walrus operator. This Python feature is new in Python 3.8. It can be used to evaluate an expression and simultaneously assign it to a variable. This can be useful to simplify the code in some cases. I will show you the syntax of the walrus operator and two useful examples.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Q8oRicpUeuw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Q8oRicpUeuw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Q8oRicpUeuw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Q8oRicpUeuw/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Q8oRicpUeuw/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python 3.8",
                    "Walrus operator",
                    "Python Tutorial",
                    "assignment expression Python"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "The Walrus Operator - New in Python 3.8 - Python Tutorial",
                    "description": "In this Python Tutorial I show you the new assignment expression also known as the walrus operator. This Python feature is new in Python 3.8. It can be used to evaluate an expression and simultaneously assign it to a variable. This can be useful to simplify the code in some cases. I will show you the syntax of the walrus operator and two useful examples.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial"
                },
                "viewCount": "477",
                "likeCount": "23",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "8",
                "duration": "PT8M18S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "pDdP0TFzsoQ": {
                "publishedAt": "2020-02-07T15:32:59Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 14 - Convolutional Neural Network (CNN)",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will implement our first convolutional neural network (CNN) that can do image classification based on the famous CIFAR-10 dataset.\n\nWe will learn:\n- Architecture of CNNs\n- Convolutional Filter\n- Max Pooling\n- Determine the correct layer size\n- Implement the CNN architecture in PyTorch\n\nPart 14: Convolutional Neural Network (CNN)\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nMore about CNNs:\ndeeplizard channel: https://youtu.be/YRhxdVk_sIs\nStanford Lecture: https://youtu.be/bNb2fEVKeEo\nhttp://cs231n.github.io/convolutional-networks/\nhttps://machinelearningmastery.com/convolutional-layers-for-deep-learning-neural-networks/\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/pDdP0TFzsoQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/pDdP0TFzsoQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/pDdP0TFzsoQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/pDdP0TFzsoQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/pDdP0TFzsoQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "CNN",
                    "Convolutional Neural Network",
                    "PyTorch Course"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 14 - Convolutional Neural Network (CNN)",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will implement our first convolutional neural network (CNN) that can do image classification based on the famous CIFAR-10 dataset.\n\nWe will learn:\n- Architecture of CNNs\n- Convolutional Filter\n- Max Pooling\n- Determine the correct layer size\n- Implement the CNN architecture in PyTorch\n\nPart 14: Convolutional Neural Network (CNN)\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nMore about CNNs:\ndeeplizard channel: https://youtu.be/YRhxdVk_sIs\nStanford Lecture: https://youtu.be/bNb2fEVKeEo\nhttp://cs231n.github.io/convolutional-networks/\nhttps://machinelearningmastery.com/convolutional-layers-for-deep-learning-neural-networks/\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "9870",
                "likeCount": "256",
                "dislikeCount": "10",
                "favoriteCount": "0",
                "commentCount": "64",
                "duration": "PT22M7S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "FptVpIPhdpM": {
                "publishedAt": "2020-02-02T14:00:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "How To Add A Progress Bar In Python With Just One Line - Python Tutorial",
                "description": "In this Python Tutorial I show you how you can add a Progress Bar to your Python code in just one line of code! We use the great 'tqdm' module for this that can simply be installed with \"pip install tqdm\". I show you the iterable based and the manual controlled approach.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/FptVpIPhdpM/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/FptVpIPhdpM/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/FptVpIPhdpM/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/FptVpIPhdpM/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/FptVpIPhdpM/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python Tutorial",
                    "Python Progress Bar",
                    "tqdm"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "How To Add A Progress Bar In Python With Just One Line - Python Tutorial",
                    "description": "In this Python Tutorial I show you how you can add a Progress Bar to your Python code in just one line of code! We use the great 'tqdm' module for this that can simply be installed with \"pip install tqdm\". I show you the iterable based and the manual controlled approach.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding #Tutorial"
                },
                "viewCount": "6540",
                "likeCount": "110",
                "dislikeCount": "3",
                "favoriteCount": "0",
                "commentCount": "15",
                "duration": "PT5M27S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "oPhxf2fXHkQ": {
                "publishedAt": "2020-01-30T20:44:23Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 13 - Feed-Forward Neural Network",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will implement our first multilayer neural network that can do digit classification based on the famous MNIST dataset.\n\nWe put all the things from the last tutorials together:\n\n- Use the DataLoader to load our dataset and apply a transform to the dataset\n- Implement a feed-forward neural net with input layer, hidden layer, and output layer\n- Apply activation functions. \n- Set up loss and optimizer \n- Training loop that can use batch training. \n- Evaluate our model and calculate the accuracy. \n- Additionally, we will make sure that our whole code can also run on the gpu if we have gpu support.\n\nPart 13: Feed-Forward Neural Network\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/oPhxf2fXHkQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/oPhxf2fXHkQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/oPhxf2fXHkQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/oPhxf2fXHkQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/oPhxf2fXHkQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Feed-Forward Net",
                    "FFN",
                    "Feed-Forward Neural Net",
                    "Neural Net",
                    "Neural Net Python"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 13 - Feed-Forward Neural Network",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will implement our first multilayer neural network that can do digit classification based on the famous MNIST dataset.\n\nWe put all the things from the last tutorials together:\n\n- Use the DataLoader to load our dataset and apply a transform to the dataset\n- Implement a feed-forward neural net with input layer, hidden layer, and output layer\n- Apply activation functions. \n- Set up loss and optimizer \n- Training loop that can use batch training. \n- Evaluate our model and calculate the accuracy. \n- Additionally, we will make sure that our whole code can also run on the gpu if we have gpu support.\n\nPart 13: Feed-Forward Neural Network\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "5702",
                "likeCount": "132",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "22",
                "duration": "PT21M34S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "RaIu2-NM0t0": {
                "publishedAt": "2020-01-25T15:00:05Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "List Comprehension in Python - A Python Feature You MUST KNOW - Python Tutorial",
                "description": "In this Python Tutorial we will be learning about Lists Comprehension in Python. List comprehension provides a simple and concise way to create lists. It is a great feature that every Python programmer should know!\n\nWe will learn:\n- What is list comprehension and why should we use it\n- How do we use list comprehension\n- The syntax of list comprehension\n- The extended syntax with conditional statements\n- Set and Dictionary Comprehension\n- Speed Comparison: List comprehension vs. For-Loops\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/RaIu2-NM0t0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/RaIu2-NM0t0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/RaIu2-NM0t0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/RaIu2-NM0t0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/RaIu2-NM0t0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python Tutorial",
                    "List Comprehension"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "List Comprehension in Python - A Python Feature You MUST KNOW - Python Tutorial",
                    "description": "In this Python Tutorial we will be learning about Lists Comprehension in Python. List comprehension provides a simple and concise way to create lists. It is a great feature that every Python programmer should know!\n\nWe will learn:\n- What is list comprehension and why should we use it\n- How do we use list comprehension\n- The syntax of list comprehension\n- The extended syntax with conditional statements\n- Set and Dictionary Comprehension\n- Speed Comparison: List comprehension vs. For-Loops\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/python-knowledge\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #Coding"
                },
                "viewCount": "462",
                "likeCount": "18",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "5",
                "duration": "PT16M5S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "3t9lZM7SS7k": {
                "publishedAt": "2020-01-22T14:08:46Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 12 - Activation Functions",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn about activation functions in neural nets. What are activation functions, why are they needed, and how do we apply them in PyTorch.\n\nI go over following activation functions:\n- Binary Step\n- Sigmoid\n- TanH (Hyperbolic Tangent)\n- ReLU\n- Leaky ReLU\n- Softmax\n \nPart 12: Activation Functions\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/3t9lZM7SS7k/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/3t9lZM7SS7k/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/3t9lZM7SS7k/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/3t9lZM7SS7k/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/3t9lZM7SS7k/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "Activation Functions",
                    "sigmoid",
                    "softmax",
                    "ReLU"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 12 - Activation Functions",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn about activation functions in neural nets. What are activation functions, why are they needed, and how do we apply them in PyTorch.\n\nI go over following activation functions:\n- Binary Step\n- Sigmoid\n- TanH (Hyperbolic Tangent)\n- ReLU\n- Leaky ReLU\n- Softmax\n \nPart 12: Activation Functions\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "2967",
                "likeCount": "78",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "9",
                "duration": "PT10M",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "FoPPgcpSmNs": {
                "publishedAt": "2020-01-18T15:00:06Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Select Movies with Python - Web Scraping Tutorial",
                "description": "Welcome to a fun little Python Tutorial! Scrape the IMDb Top 250 movies and let Python choose a movie for you! Learn how to use requests and BeautifulSoup to scrape websites.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/python-fun\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #WebScraping #BeautifulSoup",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/FoPPgcpSmNs/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/FoPPgcpSmNs/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/FoPPgcpSmNs/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/FoPPgcpSmNs/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/FoPPgcpSmNs/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python Tutorial",
                    "Web scraping",
                    "Beautiful Soup",
                    "Web Scraping Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Select Movies with Python - Web Scraping Tutorial",
                    "description": "Welcome to a fun little Python Tutorial! Scrape the IMDb Top 250 movies and let Python choose a movie for you! Learn how to use requests and BeautifulSoup to scrape websites.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/python-fun\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #WebScraping #BeautifulSoup"
                },
                "viewCount": "3006",
                "likeCount": "61",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "10",
                "duration": "PT20M37S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "7q7E91pHoW4": {
                "publishedAt": "2020-01-14T16:00:01Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 11 - Softmax and Cross Entropy",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn about the softmax function and the cross entropy loss function. Softmax and cross entropy are popular functions used in neural nets, especially in multiclass classification problems. Learn the math behind these functions, and when and how to use them in PyTorch. Also learn differences between multiclass and binary classification problems.\n\n- Softmax function\n- Cross entropy loss\n- Use softmax and cross entropy in PyTorch\n- Differences between binary and multiclass classification\n\nPart 11: Softmax and Cross Entropy\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/7q7E91pHoW4/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/7q7E91pHoW4/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/7q7E91pHoW4/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/7q7E91pHoW4/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/7q7E91pHoW4/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "Activation Functions",
                    "softmax",
                    "cross entropy"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 11 - Softmax and Cross Entropy",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn about the softmax function and the cross entropy loss function. Softmax and cross entropy are popular functions used in neural nets, especially in multiclass classification problems. Learn the math behind these functions, and when and how to use them in PyTorch. Also learn differences between multiclass and binary classification problems.\n\n- Softmax function\n- Cross entropy loss\n- Use softmax and cross entropy in PyTorch\n- Differences between binary and multiclass classification\n\nPart 11: Softmax and Cross Entropy\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "6590",
                "likeCount": "155",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "22",
                "duration": "PT18M17S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "t2k5Lsbpj8Y": {
                "publishedAt": "2020-01-11T14:00:07Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Download Images With Python Automatically - Python Web Scraping Tutorial",
                "description": "Learn how we can automatically scrape and download images from Google Images with Python. We will use two Python packages called requests and BeautifulSoup for this Tutorial.\n\nJust put in a search word and the number of images you want, and Python can do the rest for you :)\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/python-fun\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #WebScraping #BeautifulSoup",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/t2k5Lsbpj8Y/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/t2k5Lsbpj8Y/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/t2k5Lsbpj8Y/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/t2k5Lsbpj8Y/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/t2k5Lsbpj8Y/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Python Tutorial",
                    "Web scraping",
                    "Beautiful Soup",
                    "Web Scraping Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Download Images With Python Automatically - Python Web Scraping Tutorial",
                    "description": "Learn how we can automatically scrape and download images from Google Images with Python. We will use two Python packages called requests and BeautifulSoup for this Tutorial.\n\nJust put in a search word and the number of images you want, and Python can do the rest for you :)\n\nIf you enjoyed this video, please subscribe to the channel!\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/python-fun\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #WebScraping #BeautifulSoup"
                },
                "viewCount": "7023",
                "likeCount": "135",
                "dislikeCount": "5",
                "favoriteCount": "0",
                "commentCount": "45",
                "duration": "PT14M21S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "X_QOZEko5uE": {
                "publishedAt": "2020-01-07T15:00:06Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 10 - Dataset Transforms",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn how we can use dataset transforms together with the built-in Dataset class.\nApply built-in transforms to images, arrays, and tensors. Or write your own custom Transform classes.\n\n- Dataset Transforms\n- Use built-in Transforms\n- Implement custom Transforms\n\nPart 10: Dataset Transforms\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLogistic Regression from scratch:\nhttps://youtu.be/JDU3AzH3WKg\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/X_QOZEko5uE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/X_QOZEko5uE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/X_QOZEko5uE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/X_QOZEko5uE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/X_QOZEko5uE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "Dataset",
                    "DataLoader"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 10 - Dataset Transforms",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn how we can use dataset transforms together with the built-in Dataset class.\nApply built-in transforms to images, arrays, and tensors. Or write your own custom Transform classes.\n\n- Dataset Transforms\n- Use built-in Transforms\n- Implement custom Transforms\n\nPart 10: Dataset Transforms\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLogistic Regression from scratch:\nhttps://youtu.be/JDU3AzH3WKg\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "6058",
                "likeCount": "112",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "14",
                "duration": "PT10M43S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "PXOzkkB5eH0": {
                "publishedAt": "2020-01-04T16:02:06Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 09 - Dataset and DataLoader - Batch Training",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we see how we can use the built-in Dataset and DataLoader classes and improve our pipeline with batch training. See how we can write our own Dataset class and use available built-in datasets. \n\n- Dataset and DataLoader\n- Automatic batch calculation\n- Batch optimization in training loop\n\nPart 09: Dataset and DataLoader\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLogistic Regression from scratch:\nhttps://youtu.be/JDU3AzH3WKg\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/PXOzkkB5eH0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/PXOzkkB5eH0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/PXOzkkB5eH0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/PXOzkkB5eH0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/PXOzkkB5eH0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "Dataset",
                    "DataLoader"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 09 - Dataset and DataLoader - Batch Training",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we see how we can use the built-in Dataset and DataLoader classes and improve our pipeline with batch training. See how we can write our own Dataset class and use available built-in datasets. \n\n- Dataset and DataLoader\n- Automatic batch calculation\n- Batch optimization in training loop\n\nPart 09: Dataset and DataLoader\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLogistic Regression from scratch:\nhttps://youtu.be/JDU3AzH3WKg\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "14606",
                "likeCount": "261",
                "dislikeCount": "3",
                "favoriteCount": "0",
                "commentCount": "43",
                "duration": "PT15M27S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "OGpQxIkR4ao": {
                "publishedAt": "2019-12-30T14:00:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 08 - Logistic Regression",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we implement a logistic regression algorithm and apply all the concepts that we have learned so far:\n\n- Training Pipeline in PyTorch\n- Model Design\n- Loss and Optimizer\n- Automatic Training steps with forward pass, backward pass, and weight updates\n\nPart 08: Logistic Regression\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLogistic Regression from scratch:\nhttps://youtu.be/JDU3AzH3WKg\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/OGpQxIkR4ao/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/OGpQxIkR4ao/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/OGpQxIkR4ao/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/OGpQxIkR4ao/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/OGpQxIkR4ao/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "Logistic Regression",
                    "sigmoid"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 08 - Logistic Regression",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we implement a logistic regression algorithm and apply all the concepts that we have learned so far:\n\n- Training Pipeline in PyTorch\n- Model Design\n- Loss and Optimizer\n- Automatic Training steps with forward pass, backward pass, and weight updates\n\nPart 08: Logistic Regression\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLogistic Regression from scratch:\nhttps://youtu.be/JDU3AzH3WKg\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "5619",
                "likeCount": "116",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "39",
                "duration": "PT18M22S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "YAJ5XBwlN4o": {
                "publishedAt": "2019-12-29T22:00:24Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 07 - Linear Regression",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we implement a logistic regression algorithm and apply all the concepts that we have learned so far:\n\n- Training Pipeline in PyTorch\n- Model Design\n- Loss and Optimizer\n- Automatic Training steps with forward pass, backward pass, and weight updates\n\nPart 07: Linear Regression\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/YAJ5XBwlN4o/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/YAJ5XBwlN4o/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/YAJ5XBwlN4o/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/YAJ5XBwlN4o/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/YAJ5XBwlN4o/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "Linear Regression"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 07 - Linear Regression",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we implement a logistic regression algorithm and apply all the concepts that we have learned so far:\n\n- Training Pipeline in PyTorch\n- Model Design\n- Loss and Optimizer\n- Automatic Training steps with forward pass, backward pass, and weight updates\n\nPart 07: Linear Regression\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "6108",
                "likeCount": "127",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "24",
                "duration": "PT12M11S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "VVDHU_TWwUg": {
                "publishedAt": "2019-12-28T11:00:06Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 06 - Training Pipeline: Model, Loss, and Optimizer",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we improve the code from the last part and will learn how a complete training pipeline is implemented in PyTorch. We replace the manually computed loss and weight updates with a loss and an optimizer from the PyTorch framework, which can do the optimization for us. We will then see how a PyTorch model is implemented and used for the forward pass.\n\n- Training Pipeline in PyTorch\n- Model Design\n- Loss and Optimizer\n- Automatic Training steps with forward pass, backward pass, and weight updates\n\nPart 06: Training Pipeline: Model, Loss, and Optimizer\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/VVDHU_TWwUg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/VVDHU_TWwUg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/VVDHU_TWwUg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/VVDHU_TWwUg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/VVDHU_TWwUg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "PyTorch Training"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 06 - Training Pipeline: Model, Loss, and Optimizer",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we improve the code from the last part and will learn how a complete training pipeline is implemented in PyTorch. We replace the manually computed loss and weight updates with a loss and an optimizer from the PyTorch framework, which can do the optimization for us. We will then see how a PyTorch model is implemented and used for the forward pass.\n\n- Training Pipeline in PyTorch\n- Model Design\n- Loss and Optimizer\n- Automatic Training steps with forward pass, backward pass, and weight updates\n\nPart 06: Training Pipeline: Model, Loss, and Optimizer\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "7824",
                "likeCount": "178",
                "dislikeCount": "5",
                "favoriteCount": "0",
                "commentCount": "38",
                "duration": "PT14M16S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "E-I2DNVzQLg": {
                "publishedAt": "2019-12-27T11:00:05Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 05 - Gradient Descent with Autograd and Backpropagation",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn how we can use the autograd engine in practice. First we will implement Linear regression from scratch, and then we will learn how PyTorch can do the gradient calculation for us.\n\n- Linear Regression from scratch\n- Use Pytorch's autograd and backpropagation to calculate gradients\n\nPart 05: Gradient Descent with Autograd\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/E-I2DNVzQLg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/E-I2DNVzQLg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/E-I2DNVzQLg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/E-I2DNVzQLg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/E-I2DNVzQLg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "PyTorch Training",
                    "gradient descent",
                    "autograd"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 05 - Gradient Descent with Autograd and Backpropagation",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we will learn how we can use the autograd engine in practice. First we will implement Linear regression from scratch, and then we will learn how PyTorch can do the gradient calculation for us.\n\n- Linear Regression from scratch\n- Use Pytorch's autograd and backpropagation to calculate gradients\n\nPart 05: Gradient Descent with Autograd\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "7986",
                "likeCount": "198",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "42",
                "duration": "PT17M31S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "3Kb0QS6z7WA": {
                "publishedAt": "2019-12-26T11:00:00Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 04 - Backpropagation - Theory With Example",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part I will explain the famous backpropagation algorithm. I will explain all the necessary concepts and walk you through a concrete example. At the end we will see how easy it is to \nuse backpropagation in PyTorch.\n\n- Chain Rule\n- Computational Graph and local gradients\n- Forward and backward pass\n- Concrete example with numbers (Linear Regression)\n- How to use backpropagation in PyTorch\n\nPart 04: Backpropagation - Theory With Example\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01: \nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/3Kb0QS6z7WA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/3Kb0QS6z7WA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/3Kb0QS6z7WA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/3Kb0QS6z7WA/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/3Kb0QS6z7WA/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "PyTorch Training",
                    "gradient descent",
                    "autograd",
                    "backpropagation"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 04 - Backpropagation - Theory With Example",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part I will explain the famous backpropagation algorithm. I will explain all the necessary concepts and walk you through a concrete example. At the end we will see how easy it is to \nuse backpropagation in PyTorch.\n\n- Chain Rule\n- Computational Graph and local gradients\n- Forward and backward pass\n- Concrete example with numbers (Linear Regression)\n- How to use backpropagation in PyTorch\n\nPart 04: Backpropagation - Theory With Example\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01: \nhttps://youtu.be/EMXfZB8FVUA\n\nLinear Regression from scratch:\nhttps://youtu.be/4swNt7PiamQ\n\nCode for this tutorial series:\nhttps://github.com/python-engineer/pytorchTutorial\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "8317",
                "likeCount": "198",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "25",
                "duration": "PT13M13S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "DbeIqrwb_dE": {
                "publishedAt": "2019-12-25T09:44:56Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 03 - Gradient Calculation With Autograd",
                "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn how to calculate gradients using the autograd package in PyTorch.\nThis tutorial contains the following topics:\n\n- requires_grad attribute for Tensors\n- Computational graph\n- Backpropagation (brief explanation)\n- How to stop autograd from tracking history\n- How to zero (empty) gradients\n\nPart 03: Gradient Calculation With Autograd\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/DbeIqrwb_dE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/DbeIqrwb_dE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/DbeIqrwb_dE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/DbeIqrwb_dE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/DbeIqrwb_dE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "PyTorch Training",
                    "autograd",
                    "backpropagation"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 03 - Gradient Calculation With Autograd",
                    "description": "Learn all the basics you need to get started with this deep learning framework! In this part we learn how to calculate gradients using the autograd package in PyTorch.\nThis tutorial contains the following topics:\n\n- requires_grad attribute for Tensors\n- Computational graph\n- Backpropagation (brief explanation)\n- How to stop autograd from tracking history\n- How to zero (empty) gradients\n\nPart 03: Gradient Calculation With Autograd\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "14632",
                "likeCount": "267",
                "dislikeCount": "7",
                "favoriteCount": "0",
                "commentCount": "35",
                "duration": "PT15M54S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "exaWOE8jvy8": {
                "publishedAt": "2019-12-16T12:42:28Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 02 - Tensor Basics",
                "description": "Learn all the basics you need to get started with this deep learning framework! This part covers the basics of Tensors and Tensor operations in PyTorch. Learn also how to convert from numpy data to PyTorch tensors and vice versa!\n\nPart 02: Tensor Basics\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/exaWOE8jvy8/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/exaWOE8jvy8/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/exaWOE8jvy8/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/exaWOE8jvy8/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/exaWOE8jvy8/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "PyTorch Training",
                    "PyTorch Tensor"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 02 - Tensor Basics",
                    "description": "Learn all the basics you need to get started with this deep learning framework! This part covers the basics of Tensors and Tensor operations in PyTorch. Learn also how to convert from numpy data to PyTorch tensors and vice versa!\n\nPart 02: Tensor Basics\n\nIf you enjoyed this video, please subscribe to the channel!\n\nOfficial website:\nhttps://pytorch.org/\n\nPart 01:\nhttps://youtu.be/EMXfZB8FVUA\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "17671",
                "likeCount": "301",
                "dislikeCount": "3",
                "favoriteCount": "0",
                "commentCount": "52",
                "duration": "PT18M28S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "EMXfZB8FVUA": {
                "publishedAt": "2019-12-13T22:33:16Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PyTorch Tutorial 01 - Installation",
                "description": "New Tutorial series about PyTorch! Learn all the basics you need to get started with this deep learning framework!\n\nPart 01: Installation\n\nI show you how I install PyTorch on my Mac using Anaconda. Installation on Linux or Windows can be done almost the same way.\n\nhttps://pytorch.org/\nhttps://developer.nvidia.com/cuda-downloads\n\nAnaconda Tutorial:\nhttps://youtu.be/9nEh-OXVaNI\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/EMXfZB8FVUA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/EMXfZB8FVUA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/EMXfZB8FVUA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/EMXfZB8FVUA/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/EMXfZB8FVUA/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "PyTorch",
                    "Deep Learning",
                    "DL",
                    "Python DL Tutorial",
                    "PyTorch Tutorial",
                    "PyTorch Course",
                    "Neural Net",
                    "PyTorch Training",
                    "PyTorch Installation"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PyTorch Tutorial 01 - Installation",
                    "description": "New Tutorial series about PyTorch! Learn all the basics you need to get started with this deep learning framework!\n\nPart 01: Installation\n\nI show you how I install PyTorch on my Mac using Anaconda. Installation on Linux or Windows can be done almost the same way.\n\nhttps://pytorch.org/\nhttps://developer.nvidia.com/cuda-downloads\n\nAnaconda Tutorial:\nhttps://youtu.be/9nEh-OXVaNI\n\nIf you enjoyed this video, please subscribe to the channel!\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #DeepLearning #Pytorch"
                },
                "viewCount": "26826",
                "likeCount": "209",
                "dislikeCount": "6",
                "favoriteCount": "0",
                "commentCount": "34",
                "duration": "PT5M45S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "9nEh-OXVaNI": {
                "publishedAt": "2019-12-08T16:54:34Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Anaconda Tutorial - Installation and Basic Commands",
                "description": "In this Tutorial I show you how you can install and use Anaconda. Anaconda is a free Python distribution specifically designed for scientific computing. It\u2019 great for data science and machine learning tasks. In this video you can learn:\n\n- Installation\n- Manage multiple virtual Python environments\n- Package management, e.g. install numpy, scikit-learn, pandas etc. in your environments\n\nIf you enjoyed this video, please subscribe to the channel!\n\nAnaconda website:\nhttps://www.anaconda.com/distribution/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/9nEh-OXVaNI/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/9nEh-OXVaNI/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/9nEh-OXVaNI/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/9nEh-OXVaNI/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/9nEh-OXVaNI/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Anaconda",
                    "Anaconda Installation",
                    "Python Tutorial",
                    "virtual env"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Anaconda Tutorial - Installation and Basic Commands",
                    "description": "In this Tutorial I show you how you can install and use Anaconda. Anaconda is a free Python distribution specifically designed for scientific computing. It\u2019 great for data science and machine learning tasks. In this video you can learn:\n\n- Installation\n- Manage multiple virtual Python environments\n- Package management, e.g. install numpy, scikit-learn, pandas etc. in your environments\n\nIf you enjoyed this video, please subscribe to the channel!\n\nAnaconda website:\nhttps://www.anaconda.com/distribution/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "1214",
                "likeCount": "17",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "10",
                "duration": "PT12M",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "vtuH4VRq1AU": {
                "publishedAt": "2019-12-04T16:30:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "K-Means Clustering in Python - Machine Learning From Scratch 12 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a K-Means algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/vtuH4VRq1AU/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/vtuH4VRq1AU/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/vtuH4VRq1AU/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/vtuH4VRq1AU/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/vtuH4VRq1AU/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "K-Means Clustering in Python - Machine Learning From Scratch 12 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a K-Means algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "4194",
                "likeCount": "79",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "36",
                "duration": "PT29M28S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "52d7ha-GdV8": {
                "publishedAt": "2019-11-30T16:00:00Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "PCA (Principal Component Analysis) in Python - Machine Learning From Scratch 11 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a PCA algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/52d7ha-GdV8/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/52d7ha-GdV8/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/52d7ha-GdV8/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/52d7ha-GdV8/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/52d7ha-GdV8/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "PCA (Principal Component Analysis) in Python - Machine Learning From Scratch 11 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a PCA algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "2660",
                "likeCount": "64",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "19",
                "duration": "PT17M17S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Oq1cKjR8hNo": {
                "publishedAt": "2019-11-27T16:30:00Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Random Forest in Python - Machine Learning From Scratch 10 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a Random Forest algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nDecision Tree Part 1: https://youtu.be/jVh5NA9ERDA\nDecision Tree Part 2: https://youtu.be/Bqi7EFFvNOg\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Oq1cKjR8hNo/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Oq1cKjR8hNo/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Oq1cKjR8hNo/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Oq1cKjR8hNo/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Oq1cKjR8hNo/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Random Forest in Python - Machine Learning From Scratch 10 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a Random Forest algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nDecision Tree Part 1: https://youtu.be/jVh5NA9ERDA\nDecision Tree Part 2: https://youtu.be/Bqi7EFFvNOg\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "2113",
                "likeCount": "38",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "18",
                "duration": "PT13M19S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Bqi7EFFvNOg": {
                "publishedAt": "2019-11-22T10:30:00Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Decision Tree in Python Part 2/2 - Machine Learning From Scratch 09 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a Decision Tree algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nPart 1 will cover the theory, and Part 2 contains the implementation.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Bqi7EFFvNOg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Bqi7EFFvNOg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Bqi7EFFvNOg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Bqi7EFFvNOg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Bqi7EFFvNOg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Decision Tree in Python Part 2/2 - Machine Learning From Scratch 09 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a Decision Tree algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nPart 1 will cover the theory, and Part 2 contains the implementation.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "2929",
                "likeCount": "55",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "31",
                "duration": "PT30M44S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "jVh5NA9ERDA": {
                "publishedAt": "2019-11-21T21:56:50Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Decision Tree in Python Part 1/2 - Machine Learning From Scratch 08 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a Decision Tree algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nPart 1 will cover the theory, and Part 2 contains the implementation.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/jVh5NA9ERDA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/jVh5NA9ERDA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/jVh5NA9ERDA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/jVh5NA9ERDA/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/jVh5NA9ERDA/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Decision Tree in Python Part 1/2 - Machine Learning From Scratch 08 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a Decision Tree algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nPart 1 will cover the theory, and Part 2 contains the implementation.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "2776",
                "likeCount": "43",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "8",
                "duration": "PT10M35S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "UX0f9BNBcsY": {
                "publishedAt": "2019-10-19T10:38:49Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "SVM (Support Vector Machine) in Python - Machine Learning From Scratch 07 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a SVM (Support Vector Machine) algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://towardsdatascience.com/support-vector-machine-introduction-to-machine-learning-algorithms-934a444fca47\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/UX0f9BNBcsY/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/UX0f9BNBcsY/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/UX0f9BNBcsY/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/UX0f9BNBcsY/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/UX0f9BNBcsY/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "ML",
                    "Machine Learning",
                    "SVM",
                    "numpy",
                    "Support Vector Machine"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "SVM (Support Vector Machine) in Python - Machine Learning From Scratch 07 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a SVM (Support Vector Machine) algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://towardsdatascience.com/support-vector-machine-introduction-to-machine-learning-algorithms-934a444fca47\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "7675",
                "likeCount": "131",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "53",
                "duration": "PT19M28S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "t2ym2a3pb_Y": {
                "publishedAt": "2019-10-11T15:22:09Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Perceptron in Python - Machine Learning From Scratch 06 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a single-layer Perceptron algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://sebastianraschka.com/Articles/2015_singlelayer_neurons.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/t2ym2a3pb_Y/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/t2ym2a3pb_Y/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/t2ym2a3pb_Y/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/t2ym2a3pb_Y/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/t2ym2a3pb_Y/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Machine Learning",
                    "Tutorial",
                    "Perceptron"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Perceptron in Python - Machine Learning From Scratch 06 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement a single-layer Perceptron algorithm using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://sebastianraschka.com/Articles/2015_singlelayer_neurons.html\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "7038",
                "likeCount": "109",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "21",
                "duration": "PT17M45S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "BqUmKsfSWho": {
                "publishedAt": "2019-09-29T16:00:04Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Naive Bayes in Python - Machine Learning From Scratch 05 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the Naive Bayes algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://towardsdatascience.com/naive-bayes-classifier-81d512f50a7c\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/BqUmKsfSWho/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/BqUmKsfSWho/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/BqUmKsfSWho/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/BqUmKsfSWho/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/BqUmKsfSWho/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "Naive Bayes",
                    "numpy",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Naive Bayes in Python - Machine Learning From Scratch 05 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the Naive Bayes algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://towardsdatascience.com/naive-bayes-classifier-81d512f50a7c\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "11260",
                "likeCount": "192",
                "dislikeCount": "8",
                "favoriteCount": "0",
                "commentCount": "70",
                "duration": "PT20M42S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "PC7cVBbU7UQ": {
                "publishedAt": "2019-09-22T16:00:06Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Linear and Logistic Regression in 60 lines of Python - Machine Learning From Scratch 04",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to refactor the code from the previous two videos. We will implement Linear and Logistic Regression in only 60 lines of Python, with the help of a Base Regression class.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/PC7cVBbU7UQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/PC7cVBbU7UQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/PC7cVBbU7UQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/PC7cVBbU7UQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/PC7cVBbU7UQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "numpy",
                    "Linear Regression",
                    "Logistic Regression",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Linear and Logistic Regression in 60 lines of Python - Machine Learning From Scratch 04",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to refactor the code from the previous two videos. We will implement Linear and Logistic Regression in only 60 lines of Python, with the help of a Base Regression class.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "951",
                "likeCount": "18",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "6",
                "duration": "PT7M30S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "JDU3AzH3WKg": {
                "publishedAt": "2019-09-15T16:00:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Logistic Regression in Python - Machine Learning From Scratch 03 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the Logistic Regression algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://ml-cheatsheet.readthedocs.io/en/latest/logistic_regression.html\nhttps://towardsdatascience.com/logistic-regression-detailed-overview-46c4da4303bc\n\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/JDU3AzH3WKg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/JDU3AzH3WKg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/JDU3AzH3WKg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/JDU3AzH3WKg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/JDU3AzH3WKg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "numpy",
                    "Tutorial",
                    "Logistic Regression"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Logistic Regression in Python - Machine Learning From Scratch 03 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the Logistic Regression algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://ml-cheatsheet.readthedocs.io/en/latest/logistic_regression.html\nhttps://towardsdatascience.com/logistic-regression-detailed-overview-46c4da4303bc\n\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "9142",
                "likeCount": "183",
                "dislikeCount": "3",
                "favoriteCount": "0",
                "commentCount": "71",
                "duration": "PT17M9S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "4swNt7PiamQ": {
                "publishedAt": "2019-09-11T13:25:56Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Linear Regression in Python - Machine Learning From Scratch 02 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the Linear Regression algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://ml-cheatsheet.readthedocs.io/en/latest/linear_regression.html\nhttps://ml-cheatsheet.readthedocs.io/en/latest/gradient_descent.html\n\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/4swNt7PiamQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/4swNt7PiamQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/4swNt7PiamQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/4swNt7PiamQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/4swNt7PiamQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "Regression",
                    "numpy",
                    "Tutorial",
                    "Gradient descent"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Linear Regression in Python - Machine Learning From Scratch 02 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the Linear Regression algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nFurther readings:\nhttps://ml-cheatsheet.readthedocs.io/en/latest/linear_regression.html\nhttps://ml-cheatsheet.readthedocs.io/en/latest/gradient_descent.html\n\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "7642",
                "likeCount": "170",
                "dislikeCount": "5",
                "favoriteCount": "0",
                "commentCount": "67",
                "duration": "PT20M35S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "ngLyX54e1LU": {
                "publishedAt": "2019-09-03T15:00:07Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "KNN (K Nearest Neighbors) in Python - Machine Learning From Scratch 01 - Python Tutorial",
                "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the K Nearest Neighbors (KNN) algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/ngLyX54e1LU/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/ngLyX54e1LU/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/ngLyX54e1LU/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/ngLyX54e1LU/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/ngLyX54e1LU/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Machine Learning",
                    "ML",
                    "numpy",
                    "KNN",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "KNN (K Nearest Neighbors) in Python - Machine Learning From Scratch 01 - Python Tutorial",
                    "description": "In this Machine Learning from Scratch Tutorial, we are going to implement the K Nearest Neighbors (KNN) algorithm, using only built-in Python modules and numpy. We will also learn about the concept and the math behind this popular ML algorithm.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nThe code can be found here:\nhttps://github.com/python-engineer/MLfromscratch\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python #MachineLearning"
                },
                "viewCount": "22149",
                "likeCount": "324",
                "dislikeCount": "9",
                "favoriteCount": "0",
                "commentCount": "86",
                "duration": "PT21M58S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "YE6a31J65Rc": {
                "publishedAt": "2019-08-25T15:00:10Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Context Managers in Python - Advanced Python 21 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, we will talk about context managers and the with statement. Context managers are a great tool for resource management. They allow you to allocate and release resources precisely when you want to. A well-known example is the with open() statement. In this video we will learn:\n\n- The concept of context managers, and what they are used for\n- Typical examples of context managers\n- How can we implement our own context manager.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/21-contextmanagers/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/YE6a31J65Rc/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/YE6a31J65Rc/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/YE6a31J65Rc/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/YE6a31J65Rc/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/YE6a31J65Rc/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial",
                    "Context Manager",
                    "With statement"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Context Managers in Python - Advanced Python 21 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, we will talk about context managers and the with statement. Context managers are a great tool for resource management. They allow you to allocate and release resources precisely when you want to. A well-known example is the with open() statement. In this video we will learn:\n\n- The concept of context managers, and what they are used for\n- Typical examples of context managers\n- How can we implement our own context manager.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/21-contextmanagers/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1904",
                "likeCount": "45",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "23",
                "duration": "PT15M44S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "RQ6Ur_T0G3Y": {
                "publishedAt": "2019-08-19T17:41:48Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Shallow vs Deep Copying in Python - Advanced Python 20 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, we will talk about copying. We will learn how we can copy mutable elements with the built-in copy module, and the difference between shallow and deep copies. We will also have a look at how to make actual copies of custom objects.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/20-copy/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/RQ6Ur_T0G3Y/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/RQ6Ur_T0G3Y/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/RQ6Ur_T0G3Y/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/RQ6Ur_T0G3Y/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/RQ6Ur_T0G3Y/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial",
                    "Copy"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Shallow vs Deep Copying in Python - Advanced Python 20 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, we will talk about copying. We will learn how we can copy mutable elements with the built-in copy module, and the difference between shallow and deep copies. We will also have a look at how to make actual copies of custom objects.\n\nIf you enjoyed this video, please subscribe to the channel!\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/20-copy/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1941",
                "likeCount": "47",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "4",
                "duration": "PT9M56S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "M7daahMOMMc": {
                "publishedAt": "2019-08-09T18:32:16Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "The asterisk (*) operator in Python - Advanced Python 19 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, I will talk about the asterisk (*) or star operator in Python. I will talk about the different use cases:\n\n- Multiplication and power operations\n- Creation of list / tuple / string with repeated elements\n- Variable length arguments (*args and **kwargs)\n- Keyword only arguments\n- Unpacking container data types into function arguments\n- Unpacking container into single and multiple elements\n- Merging lists / dictionaries\n\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/19-asterisk/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/M7daahMOMMc/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/M7daahMOMMc/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/M7daahMOMMc/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/M7daahMOMMc/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/M7daahMOMMc/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial",
                    "Asterisk",
                    "Unpacking"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "The asterisk (*) operator in Python - Advanced Python 19 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, I will talk about the asterisk (*) or star operator in Python. I will talk about the different use cases:\n\n- Multiplication and power operations\n- Creation of list / tuple / string with repeated elements\n- Variable length arguments (*args and **kwargs)\n- Keyword only arguments\n- Unpacking container data types into function arguments\n- Unpacking container into single and multiple elements\n- Merging lists / dictionaries\n\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/19-asterisk/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1984",
                "likeCount": "44",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "6",
                "duration": "PT13M1S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "iSEyb7ehLK0": {
                "publishedAt": "2019-08-07T21:28:23Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Function arguments in detail - Advanced Python 18 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, I will talk about function arguments in detail. This video will cover:\n\n- The difference between arguments and parameters\n- Positional and keyword arguments\n- Default arguments\n- Variable-length arguments (*args and **kwargs)\n- Container unpacking into function arguments\n- Local vs. global arguments\n- Parameter passing (by value or by reference?)\n\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/18-function-arguments/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/iSEyb7ehLK0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/iSEyb7ehLK0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/iSEyb7ehLK0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/iSEyb7ehLK0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/iSEyb7ehLK0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial",
                    "Functions"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Function arguments in detail - Advanced Python 18 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, I will talk about function arguments in detail. This video will cover:\n\n- The difference between arguments and parameters\n- Positional and keyword arguments\n- Default arguments\n- Variable-length arguments (*args and **kwargs)\n- Container unpacking into function arguments\n- Local vs. global arguments\n- Parameter passing (by value or by reference?)\n\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/18-function-arguments/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1671",
                "likeCount": "28",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "12",
                "duration": "PT24M21S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "IT8RYokUvvQ": {
                "publishedAt": "2019-08-04T18:17:38Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Multiprocessing in Python - Advanced Python 17 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, I will go into more detail about the multiprocessing module in Python. This video will cover:\n\n- How to create and run multiple processes\n- How to share data between processes\n- Hot to use Locks to prevent race conditions\n- How to use a Queue for process safe data exchanges\n- How to use a Process Pool to manage multiple worker processes\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/17-multiprocessing/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/IT8RYokUvvQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/IT8RYokUvvQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/IT8RYokUvvQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/IT8RYokUvvQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/IT8RYokUvvQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial",
                    "Multiprocessing",
                    "Lock",
                    "Queue"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Multiprocessing in Python - Advanced Python 17 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, I will go into more detail about the multiprocessing module in Python. This video will cover:\n\n- How to create and run multiple processes\n- How to share data between processes\n- Hot to use Locks to prevent race conditions\n- How to use a Queue for process safe data exchanges\n- How to use a Process Pool to manage multiple worker processes\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/17-multiprocessing/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "3097",
                "likeCount": "42",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "8",
                "duration": "PT22M47S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "usyg5vbni34": {
                "publishedAt": "2019-07-28T15:00:09Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Threading in Python - Advanced Python 16 - Programming Tutorial",
                "description": "Threading in Python - Advanced Python 16 - Programming Tutorial\n\nIn this Python Advanced Tutorial, I will go into more detail about the threading module in Python. This video will cover:\n\n- How to share data between threads\n- Hot to use Locks to prevent race conditions\n- What is a daemon thread\n- How to use a Queue for thread safe data exchanges \n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/16-threading/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/usyg5vbni34/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/usyg5vbni34/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/usyg5vbni34/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/usyg5vbni34/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/usyg5vbni34/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Tutorial",
                    "Programming",
                    "Threading",
                    "Lock",
                    "Queue"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Threading in Python - Advanced Python 16 - Programming Tutorial",
                    "description": "Threading in Python - Advanced Python 16 - Programming Tutorial\n\nIn this Python Advanced Tutorial, I will go into more detail about the threading module in Python. This video will cover:\n\n- How to share data between threads\n- Hot to use Locks to prevent race conditions\n- What is a daemon thread\n- How to use a Queue for thread safe data exchanges \n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/16-threading/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2422",
                "likeCount": "46",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "11",
                "duration": "PT23M42S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "vbtxtvuCFRM": {
                "publishedAt": "2019-07-26T18:46:32Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Threading vs Multiprocessing in Python - Advanced Python 15 - Programming Tutorial",
                "description": "Threading vs Multiprocessing in Python - Advanced Python 15 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Threading and Multiprocessing in Python. With Threading and Multiprocessing you can run code in parallel and speed up your code. This Tutorial will cover:\n\n- the difference between a Process and a Thread\n- The advantages and disadvantages of both\n- The Global interpreter lock (GIL)\n- How and why Threads are limited by the GIL\n- How to use the built-in threading and multiprocessing module to create and run multiple threads or processes.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/15-thread-vs-process/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/vbtxtvuCFRM/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/vbtxtvuCFRM/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/vbtxtvuCFRM/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/vbtxtvuCFRM/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/vbtxtvuCFRM/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial",
                    "GIL",
                    "Lock",
                    "Thread",
                    "Process"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Threading vs Multiprocessing in Python - Advanced Python 15 - Programming Tutorial",
                    "description": "Threading vs Multiprocessing in Python - Advanced Python 15 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Threading and Multiprocessing in Python. With Threading and Multiprocessing you can run code in parallel and speed up your code. This Tutorial will cover:\n\n- the difference between a Process and a Thread\n- The advantages and disadvantages of both\n- The Global interpreter lock (GIL)\n- How and why Threads are limited by the GIL\n- How to use the built-in threading and multiprocessing module to create and run multiple threads or processes.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/15-thread-vs-process/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "4291",
                "likeCount": "75",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "12",
                "duration": "PT14M48S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "4CxB2V2lERs": {
                "publishedAt": "2019-07-18T16:00:00Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Generators in Python - Advanced Python 14 - Programming Tutorial",
                "description": "Generators in Python - Advanced Python 14 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Generators in Python. Generators are functions that return an object that can be iterated over. The special thing is that they generate the items inside the object lazily, which means they generate the items only one at a time, and only when you ask for it. Because of this they are much more memory efficient than other sequence objects when you have to deal with large datasets. In this video, we will learn how generators are implemented, the concept behind them, and we will have a look at the advantages and some examples.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/14-generators/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/4CxB2V2lERs/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/4CxB2V2lERs/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/4CxB2V2lERs/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/4CxB2V2lERs/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/4CxB2V2lERs/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Generators in Python - Advanced Python 14 - Programming Tutorial",
                    "description": "Generators in Python - Advanced Python 14 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Generators in Python. Generators are functions that return an object that can be iterated over. The special thing is that they generate the items inside the object lazily, which means they generate the items only one at a time, and only when you ask for it. Because of this they are much more memory efficient than other sequence objects when you have to deal with large datasets. In this video, we will learn how generators are implemented, the concept behind them, and we will have a look at the advantages and some examples.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/14-generators/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1701",
                "likeCount": "37",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "10",
                "duration": "PT18M12S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "FXUUSfJO_J4": {
                "publishedAt": "2019-07-15T15:33:02Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Decorators in Python - Advanced Python 13 - Programming Tutorial",
                "description": "Decorators in Python - Advanced Python 13 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Decorators in Python. A decorator is a function that takes another function and extends the behavior of this function without explicitly modifying it. It's a very powerful tool for advanced programmers. In this tutorial, I show you the concept behind decorators, how you can write your own decorators, the difference between function and class decorators, and some typical use cases.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/13-decorators/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/FXUUSfJO_J4/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/FXUUSfJO_J4/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/FXUUSfJO_J4/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/FXUUSfJO_J4/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/FXUUSfJO_J4/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Decorators in Python - Advanced Python 13 - Programming Tutorial",
                    "description": "Decorators in Python - Advanced Python 13 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Decorators in Python. A decorator is a function that takes another function and extends the behavior of this function without explicitly modifying it. It's a very powerful tool for advanced programmers. In this tutorial, I show you the concept behind decorators, how you can write your own decorators, the difference between function and class decorators, and some typical use cases.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/13-decorators/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2139",
                "likeCount": "44",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "8",
                "duration": "PT21M24S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "CsLsGCbnlJY": {
                "publishedAt": "2019-07-13T17:14:51Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Random Numbers in Python - Advanced Python 12 - Programming Tutorial",
                "description": "Random Numbers in Python - Advanced Python 12 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about random numbers in Python. Python comes with different built-in modules to generate random numbers. In this Tutorial we will have a look at the random module for pseudo-random numbers, the secrets module for cryptographically strong random numbers, and the numpy.random module to generate arrays filled with random numbers.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/12-random-numbers/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/CsLsGCbnlJY/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/CsLsGCbnlJY/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/CsLsGCbnlJY/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/CsLsGCbnlJY/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/CsLsGCbnlJY/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Random Numbers in Python - Advanced Python 12 - Programming Tutorial",
                    "description": "Random Numbers in Python - Advanced Python 12 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about random numbers in Python. Python comes with different built-in modules to generate random numbers. In this Tutorial we will have a look at the random module for pseudo-random numbers, the secrets module for cryptographically strong random numbers, and the numpy.random module to generate arrays filled with random numbers.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/12-random-numbers/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1221",
                "likeCount": "22",
                "dislikeCount": "1",
                "favoriteCount": "0",
                "commentCount": "9",
                "duration": "PT14M57S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "EtAGd-3arNE": {
                "publishedAt": "2019-07-03T20:23:31Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "JSON in Python - Advanced Python 11 - Programming Tutorial",
                "description": "JSON in Python - Advanced Python 11 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about JSON in Python. JSON (JavaScript Object Notation) is a leightweight data format that is used for data exchange. Python already comes with a built-in json module that makes working with json data very easy. In this tutorial we will have a look at how we can encode and decode json data with this module, and how we can encode/decode custom objects.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/11-json/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/EtAGd-3arNE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/EtAGd-3arNE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/EtAGd-3arNE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/EtAGd-3arNE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/EtAGd-3arNE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "JSON in Python - Advanced Python 11 - Programming Tutorial",
                    "description": "JSON in Python - Advanced Python 11 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about JSON in Python. JSON (JavaScript Object Notation) is a leightweight data format that is used for data exchange. Python already comes with a built-in json module that makes working with json data very easy. In this tutorial we will have a look at how we can encode and decode json data with this module, and how we can encode/decode custom objects.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/11-json/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2266",
                "likeCount": "31",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "10",
                "duration": "PT17M35S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "p0A4CV4MWd0": {
                "publishedAt": "2019-06-30T17:55:51Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Logging in Python - Advanced Python 10 - Programming Tutorial",
                "description": "Logging in Python - Advanced Python 10 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Logging in Python. Python already comes with a powerful built-in logging module so you can quickly add logging to your application. In this tutorial we will have a look at:\n\n- Different LogLevel\n- Different Configuration options\n- How to log in different modules\n- How to use different LogHandlers\n- How to capture StackTraces in your log\n- How to use Rotating FileHandler\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/10-logging/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/p0A4CV4MWd0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/p0A4CV4MWd0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/p0A4CV4MWd0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/p0A4CV4MWd0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/p0A4CV4MWd0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Logging in Python - Advanced Python 10 - Programming Tutorial",
                    "description": "Logging in Python - Advanced Python 10 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Logging in Python. Python already comes with a powerful built-in logging module so you can quickly add logging to your application. In this tutorial we will have a look at:\n\n- Different LogLevel\n- Different Configuration options\n- How to log in different modules\n- How to use different LogHandlers\n- How to capture StackTraces in your log\n- How to use Rotating FileHandler\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/10-logging/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "5409",
                "likeCount": "90",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "16",
                "duration": "PT22M30S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "qOuOV4pDVGY": {
                "publishedAt": "2019-06-26T21:01:15Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Exceptions in Python - Advanced Python 09 - Programming Tutorial",
                "description": "Exceptions in Python - Advanced Python 09 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Errors and Exceptions in Python. A Python program terminates as soon as it encounters an error, and an error can be either a syntax error or an exception. In this tutorial we will have a look at:\n\n- Syntax Error vs. Exception\n- Most common built-in Exceptions\n- How to raise Exceptions\n- How to handle Exceptions\n- How to define your own Exception\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/09-exceptions/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/qOuOV4pDVGY/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/qOuOV4pDVGY/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/qOuOV4pDVGY/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/qOuOV4pDVGY/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/qOuOV4pDVGY/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Exceptions in Python - Advanced Python 09 - Programming Tutorial",
                    "description": "Exceptions in Python - Advanced Python 09 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Errors and Exceptions in Python. A Python program terminates as soon as it encounters an error, and an error can be either a syntax error or an exception. In this tutorial we will have a look at:\n\n- Syntax Error vs. Exception\n- Most common built-in Exceptions\n- How to raise Exceptions\n- How to handle Exceptions\n- How to define your own Exception\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/09-exceptions/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "1913",
                "likeCount": "34",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "7",
                "duration": "PT16M20S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "D2TJ9wvSP94": {
                "publishedAt": "2019-06-24T19:57:01Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Lambda in Python - Advanced Python 08 - Programming Tutorial - Map Filter Reduce",
                "description": "Lambda in Python - Advanced Python 08 - Programming Tutorial - Map Filter Reduce\n\nIn this Python Advanced Tutorial, we will be learning about Lambda functions in Python. A lambda function is a small (one line) anonymous function that is defined without a name. It is typically used when you need a simple function that is used only once in your code, or it is used as an argument to higher-order functions. We will go over how you define them, and some use cases together with the built-in sorted(), map(), filter,() and reduce() functions.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/08-lambda/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/D2TJ9wvSP94/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/D2TJ9wvSP94/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/D2TJ9wvSP94/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/D2TJ9wvSP94/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/D2TJ9wvSP94/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Lambda in Python - Advanced Python 08 - Programming Tutorial - Map Filter Reduce",
                    "description": "Lambda in Python - Advanced Python 08 - Programming Tutorial - Map Filter Reduce\n\nIn this Python Advanced Tutorial, we will be learning about Lambda functions in Python. A lambda function is a small (one line) anonymous function that is defined without a name. It is typically used when you need a simple function that is used only once in your code, or it is used as an argument to higher-order functions. We will go over how you define them, and some use cases together with the built-in sorted(), map(), filter,() and reduce() functions.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/08-lambda/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2511",
                "likeCount": "60",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "6",
                "duration": "PT12M21S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "3ecISAkioPc": {
                "publishedAt": "2019-06-18T18:31:25Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Itertools in Python - Advanced Python 07 - Programming Tutorial",
                "description": "Itertools in Python - Advanced Python 07 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about the itertools module in Python. The itertools module is a collection of tools for handling iterators. It offers some advanced tools like product(), permutations(), combinations(), accumulate(), groupby(), and infinite iterators like cycle(), repeat(), and count().\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/07-itertools/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/3ecISAkioPc/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/3ecISAkioPc/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/3ecISAkioPc/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/3ecISAkioPc/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/3ecISAkioPc/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Itertools in Python - Advanced Python 07 - Programming Tutorial",
                    "description": "Itertools in Python - Advanced Python 07 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about the itertools module in Python. The itertools module is a collection of tools for handling iterators. It offers some advanced tools like product(), permutations(), combinations(), accumulate(), groupby(), and infinite iterators like cycle(), repeat(), and count().\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/07-itertools/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "7322",
                "likeCount": "137",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "10",
                "duration": "PT15M23S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "UdcPhnNjSEw": {
                "publishedAt": "2019-06-16T09:11:31Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Collections in Python - Advanced Python 06 - Programming Tutorial",
                "description": "Collections in Python - Advanced Python 06 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about the collections module in Python. The collections module implements special container datatypes and provides alternatives with some additional functionality compared to the general built-in containers, like dict, list, or tuple.\n\nWe will be talking about 5 different types from the collections module: The Counter, the namedtuple, the OrderedDict, the defaultdict, and the deque.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/06-collections/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/UdcPhnNjSEw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/UdcPhnNjSEw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/UdcPhnNjSEw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/UdcPhnNjSEw/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/UdcPhnNjSEw/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Tutorial"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Collections in Python - Advanced Python 06 - Programming Tutorial",
                    "description": "Collections in Python - Advanced Python 06 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about the collections module in Python. The collections module implements special container datatypes and provides alternatives with some additional functionality compared to the general built-in containers, like dict, list, or tuple.\n\nWe will be talking about 5 different types from the collections module: The Counter, the namedtuple, the OrderedDict, the defaultdict, and the deque.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/06-collections/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "10989",
                "likeCount": "236",
                "dislikeCount": "4",
                "favoriteCount": "0",
                "commentCount": "36",
                "duration": "PT14M10S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "e6ivlABOYRI": {
                "publishedAt": "2019-06-14T18:05:55Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Strings in Python - Advanced Python 05 - Programming Tutorial",
                "description": "Strings in Python - Advanced Python 05 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Strings in Python. A String is an ordered, and immutable collection data type that is used for text representation, and it's one of the most used data types in Python. We will go over how you can use them and some advanced techniques that can be applied to strings.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/05-strings/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/e6ivlABOYRI/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/e6ivlABOYRI/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/e6ivlABOYRI/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/e6ivlABOYRI/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/e6ivlABOYRI/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Programming",
                    "Coding",
                    "Strings"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Strings in Python - Advanced Python 05 - Programming Tutorial",
                    "description": "Strings in Python - Advanced Python 05 - Programming Tutorial\n\nIn this Python Advanced Tutorial, we will be learning about Strings in Python. A String is an ordered, and immutable collection data type that is used for text representation, and it's one of the most used data types in Python. We will go over how you can use them and some advanced techniques that can be applied to strings.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/05-strings/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2469",
                "likeCount": "57",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "11",
                "duration": "PT24M16S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Qs3BSFZnZSI": {
                "publishedAt": "2019-05-28T20:30:09Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Sets in Python - Advanced Python 04 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, we will be learning about Sets in Python. A Set is a collection data type that is unordered and mutable, but unlike lists or tuples it does not allow duplicate elements. We will go over how you can use them and some advanced techniques that can be applied to sets.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/04-sets/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Qs3BSFZnZSI/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Qs3BSFZnZSI/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Qs3BSFZnZSI/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Qs3BSFZnZSI/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Qs3BSFZnZSI/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Tutorial",
                    "Programming"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Sets in Python - Advanced Python 04 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, we will be learning about Sets in Python. A Set is a collection data type that is unordered and mutable, but unlike lists or tuples it does not allow duplicate elements. We will go over how you can use them and some advanced techniques that can be applied to sets.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/04-sets/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "2380",
                "likeCount": "49",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "6",
                "duration": "PT16M19S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "LTXnQdrwyrw": {
                "publishedAt": "2019-05-26T16:01:16Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Dictionaries in Python - Advanced Python 03 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial we will be learning about Dictionaries in Python. A Dictionary is a collection data type that is unordered and mutable. It consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. We will go over how you can use them and some advanced techniques that can be applied to dictionaries.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/03-dict/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/LTXnQdrwyrw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/LTXnQdrwyrw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/LTXnQdrwyrw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/LTXnQdrwyrw/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/LTXnQdrwyrw/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Tutorial",
                    "Programming"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Dictionaries in Python - Advanced Python 03 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial we will be learning about Dictionaries in Python. A Dictionary is a collection data type that is unordered and mutable. It consists of a collection of key-value pairs. Each key-value pair maps the key to its associated value. We will go over how you can use them and some advanced techniques that can be applied to dictionaries.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/03-dict/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "3722",
                "likeCount": "70",
                "dislikeCount": "2",
                "favoriteCount": "0",
                "commentCount": "4",
                "duration": "PT13M5S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            },
            "Kes8YRV73Io": {
                "publishedAt": "2019-05-26T13:05:05Z",
                "channelId": "UCbXgNpp0jedKWcQiULLbDTA",
                "title": "Tuples in Python - Advanced Python 02 - Programming Tutorial",
                "description": "In this Python Advanced Tutorial, we will be learning about Tuples in Python. A Tuple is a collection data type that is ordered and immutable. It is similar to a List with the main difference that a Tuple cannot be changed after its creation. A Tuple is often used for objects that belong together. We will go over how you can use them and some advanced techniques that can be applied to Tuples.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/02-tuples/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Kes8YRV73Io/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Kes8YRV73Io/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Kes8YRV73Io/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Kes8YRV73Io/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Kes8YRV73Io/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Python Engineer",
                "tags": [
                    "Python",
                    "Tutorial",
                    "Programming"
                ],
                "categoryId": "27",
                "liveBroadcastContent": "none",
                "localized": {
                    "title": "Tuples in Python - Advanced Python 02 - Programming Tutorial",
                    "description": "In this Python Advanced Tutorial, we will be learning about Tuples in Python. A Tuple is a collection data type that is ordered and immutable. It is similar to a List with the main difference that a Tuple cannot be changed after its creation. A Tuple is often used for objects that belong together. We will go over how you can use them and some advanced techniques that can be applied to Tuples.\n\nA written Tutorial can be found here:\nhttps://www.python-engineer.com/courses/advancedpython/02-tuples/\n\nYou can find me here:\nWebsite: https://www.python-engineer.com\nTwitter: https://twitter.com/python_engineer\nGitHub: https://github.com/python-engineer\n\n#Python"
                },
                "viewCount": "3330",
                "likeCount": "74",
                "dislikeCount": "0",
                "favoriteCount": "0",
                "commentCount": "7",
                "duration": "PT13M31S",
                "dimension": "2d",
                "definition": "hd",
                "caption": "false",
                "licensedContent": true,
                "contentRating": {},
                "projection": "rectangular"
            }
        }
    }
}